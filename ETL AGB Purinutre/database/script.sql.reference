INSERT INTO BUILD VALUES ('07/12/2015', 'Bruno - Incluido o campo sigla nas tabelas aux_empresas_pdl e dim_empresa', current_date);

ALTER TABLE public.aux_empresas_pdl
  ADD COLUMN sigla VARCHAR(100);

ALTER TABLE public.dim_empresa
  ADD COLUMN sigla VARCHAR(100);




CREATE TABLE public.fb_dcbi_plano_acao_chave (
  iddcbi_plano_acao_chave INTEGER,
  iddcbi_seletores_componentes INTEGER,
  parametro VARCHAR(150),
  valor VARCHAR(20000),
  descricao_selecao VARCHAR(20000)
)
WITH (oids = false);

CREATE TABLE public.fb_dcbi_plano_acao_acao (
  iddcbi_plano_acao_acao INTEGER NOT NULL,
  iddcbi_plano_acao INTEGER,
  descricao VARCHAR(10000),
  responsaveis VARCHAR(1024),
  data_termino DATE,
  resposta_responsavel VARCHAR(10000),
  obs VARCHAR(10000),
  consideracoes_finais VARCHAR(10000),
  status INTEGER,
  aprovada INTEGER
)
WITH (oids = false);

CREATE TABLE public.fb_dcbi_plano_acao (
  iddcbi_plano_acao INTEGER NOT NULL,
  iddcbi_painel INTEGER,
  iddcbi_painel_item INTEGER,
  descricao VARCHAR(500),
  usuario_criacao VARCHAR(255),
  data_criacao TIMESTAMP WITHOUT TIME ZONE,
  iddcbi_plano_acao_chave INTEGER
)
WITH (oids = false);

CREATE TABLE public.stg_gerenciador_plano_de_acao_pdl (
  valor VARCHAR(20000),
  descricao_selecao VARCHAR(20000),
  iddcbi_plano_acao_acao INTEGER,
  descricao VARCHAR(500),
  responsaveis VARCHAR(1024),
  data_termino TIMESTAMP WITHOUT TIME ZONE,
  status INTEGER,
  resposta_responsavel VARCHAR(10000),
  obs VARCHAR(10000),
  status_1 INTEGER,
  consideracoes_finais VARCHAR(10000),
  aprovada INTEGER,
  acao_sugerida VARCHAR(10000)
)
WITH (oids = false);

CREATE TABLE public.fato_gerenciador_plano_acao_pdl (
  sk_avaliacao_pdl INTEGER NOT NULL,
  sk_questao_pdl INTEGER NOT NULL,
  sk_tempo_dia INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  iddcbi_plano_acao_acao INTEGER NOT NULL,
  responsavel VARCHAR(255),
  situacao VARCHAR(20),
  resposta_responsavel VARCHAR(10000),
  obs VARCHAR(10000),
  aprovada VARCHAR(20),
  consideracoes_finais VARCHAR(10000),
  acao_sugerida VARCHAR(10000),
  CONSTRAINT fato_gerenciador_plano_acao_pdl_idx PRIMARY KEY(sk_avaliacao_pdl, sk_questao_pdl, sk_tempo_dia, sk_empresa, iddcbi_plano_acao_acao),
  CONSTRAINT fato_gerenciador_plano_acao_pdl_fk FOREIGN KEY (sk_avaliacao_pdl)
    REFERENCES public.dim_avaliacao_pdl(sk_avaliacao_pdl)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_gerenciador_plano_acao_pdl_fk1 FOREIGN KEY (sk_questao_pdl)
    REFERENCES public.dim_questao_pdl(sk_questao_pdl)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_gerenciador_plano_acao_pdl_fk2 FOREIGN KEY (sk_tempo_dia)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_gerenciador_plano_acao_pdl_fk3 FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

/* Alteração da stg de movimento de faturamento, para trazer UF e Cidadde que a nota foi destinada */
ALTER TABLE public.stg_movimento_faturamento
ADD COLUMN uf CHAR(2);

/* 21/06/2018 - Flavio Alexsandro - Criando a relação permanente entre fornecedor e o cadastro de empresa, para rebates.*/
alter table FORMULARIO_REBATES_CREDITO
	add constraint formulario_rebates_credito_fornecedor_fkey foreign key (fornecedor) references formulario_rebates_ls_empresa(codigo);

/* 21/06/2018 - Flavio Alexsandro - Ajustes no Painel e Formlário de Solicitação de Verba.*/
alter table formulario_solicitacao_verba_eventos
	rename column patrocinador to patrocinador_1;
alter table formulario_solicitacao_verba_eventos
	rename column valor_patrocinador to valor_patrocinador_1;
alter table formulario_solicitacao_verba_eventos
	rename column forma_pagamento to forma_pagamento_1;

alter table formulario_solicitacao_verba_eventos
	add column patrocinador_2 varchar(255),
	add column valor_patrocinador_2 numeric(20,2),
	add column forma_pagamento_2 integer,
	add column patrocinador_3 varchar(255),
	add column valor_patrocinador_3 numeric(20,2),
	add column forma_pagamento_3 integer,
	add column patrocinador_4 varchar(255),
	add column valor_patrocinador_4 numeric(20,2),
	add column forma_pagamento_4 integer,
	add column patrocinador_5 varchar(255),
	add column valor_patrocinador_5 numeric(20,2),
	add column forma_pagamento_5 integer,
	add column patrocinador_6 varchar(255),
	add column valor_patrocinador_6 numeric(20,2),
	add column forma_pagamento_6 integer;

alter table formulario_solicitacao_verba_eventos
	add column gerente_dnh_dma smallint;

comment on column formulario_solicitacao_verba_eventos.gerente_dnh_dma is '0 para quando for nao for Gerente DNH ou DMA e 1 para quando for.';

/* 26/06/2018 - Flavio Alexsandro - Melhoria de indices da dim tempo dia e de fatos para delecao por dia.*/
create index fato_movimento_faturamento_dia_tempo_dia_fkey on fato_movimento_faturamento_dia
	using btree(sk_tempo_dia);

drop index if exists dim_tempo_dia_sk_nk_fkey restrict;

create index dim_tempo_dia_sk_nk_fkey on dim_tempo_dia
	using btree(nk_tempo_dia, sk_tempo_dia);

drop index if exists dim_tempo_dia_idx1 restrict;

drop index if exists idx_dim_tempo_dia_lookup restrict;

drop index if exists fato_movimento_faturamento_cliente_mes_tempo_mes_idx restrict;

create index fato_movimento_faturamento_cliente_mes_tempo_mes_idx on fato_movimento_faturamento_cliente_mes
	using btree(sk_tempo_mes);

drop index if exists fato_movimento_faturamento_produto_mes_tempo_mes_idx restrict;

create index fato_movimento_faturamento_produto_mes_tempo_mes_idx on fato_movimento_faturamento_produto_mes
	using btree(sk_tempo_mes);

drop index if exists fato_movimento_faturamento_vendedor_mes_tempo_mes_idx restrict;

create index fato_movimento_faturamento_vendedor_mes_tempo_mes_idx on fato_movimento_faturamento_vendedor_mes
	using btree(sk_tempo_mes);

drop index if exists fato_vencimento_faturamento_dia_data_movimento_idx restrict;

create index fato_vencimento_faturamento_dia_data_movimento_idx on fato_vencimento_faturamento_dia
	using btree(sk_data_movimento);

drop index if exists stg_movimento_faturamento_idx, stg_movimento_faturamento_idx1 restrict;

CREATE INDEX stg_movimento_faturamento_idx ON stg_movimento_faturamento
	USING btree (datmovimento, origem);

drop index if exists stg_movimento_faturamento_cliente_idx restrict;

create index stg_movimento_faturamento_cliente_idx on stg_movimento_faturamento
	using btree (cast(idcooperado as varchar(255)));

/* Alterações relativas à adição da Flag de Usina, conta estratégica e alteração de fornecedor, caso a origem seja o SINCO e o fornecedor RAIZEN-IPI */
ALTER TABLE public.stg_cliente_pdl
  ADD COLUMN flgusina SMALLINT;

  ALTER TABLE public.stg_cliente_pdl
  ALTER COLUMN flgusina TYPE CHAR(1);

  ALTER TABLE public.dim_cliente
  ADD COLUMN usina SMALLINT;

  truncate fato_movimento_faturamento_dia;

  ALTER TABLE public.fato_movimento_faturamento_dia
  ADD COLUMN usina SMALLINT;

   -- object recreation
ALTER TABLE public.fato_movimento_faturamento_dia
  DROP CONSTRAINT fato_movimento_faturamento_dia_idx RESTRICT;

ALTER TABLE public.fato_movimento_faturamento_dia
  ADD CONSTRAINT fato_movimento_faturamento_dia_idx
    PRIMARY KEY (sk_empresa, sk_tempo_dia, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, local_faturamento, servico, nota_fiscal, flg_nota_fiscal, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_movimento_faturamento_dia0jvuiw (
  sk_empresa INTEGER,
  sk_tempo_dia INTEGER,
  sk_produto INTEGER,
  sk_cliente INTEGER,
  sk_vendedor INTEGER,
  sk_cultura INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  servico SMALLINT,
  local_faturamento VARCHAR(255),
  nota_fiscal BIGINT,
  flg_nota_fiscal VARCHAR(10),
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  qtd_movimento DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_movimento_faturamento_dia0jvuiw (sk_empresa, sk_tempo_dia, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, shopping_rural, servico, local_faturamento, nota_fiscal, flg_nota_fiscal, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete, usina)
SELECT sk_empresa, sk_tempo_dia, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, shopping_rural, servico, local_faturamento, nota_fiscal, flg_nota_fiscal, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete, usina FROM public.fato_movimento_faturamento_dia;

-- Drop the source table

DROP TABLE public.fato_movimento_faturamento_dia;

-- Create the destination table

CREATE TABLE public.fato_movimento_faturamento_dia (
  sk_empresa INTEGER NOT NULL,
  sk_tempo_dia INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  sk_cliente INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  sk_cultura INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  local_faturamento VARCHAR(255) NOT NULL,
  nota_fiscal BIGINT NOT NULL,
  flg_nota_fiscal VARCHAR(10) NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  qtd_movimento DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  CONSTRAINT fato_movimento_faturamento_dia_idx PRIMARY KEY(sk_empresa, sk_tempo_dia, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, local_faturamento, servico, nota_fiscal, flg_nota_fiscal, usina),
  CONSTRAINT fato_movimento_faturamento_dia_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk1 FOREIGN KEY (sk_tempo_dia)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk2 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk3 FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk4 FOREIGN KEY (sk_cliente)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk5 FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk6 FOREIGN KEY (sk_cultura)
    REFERENCES public.dim_cultura(sk_cultura)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_fk7 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_movimento_faturamento_dia (sk_empresa, sk_tempo_dia, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, usina, shopping_rural, servico, local_faturamento, nota_fiscal, flg_nota_fiscal, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete)
SELECT sk_empresa, sk_tempo_dia, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, usina, shopping_rural, servico, local_faturamento, nota_fiscal, flg_nota_fiscal, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete FROM fato_movimento_faturamento_dia0jvuiw;

-- Create indices, triggers and rules

CREATE INDEX fato_movimento_faturamento_dia_idx1 ON public.fato_movimento_faturamento_dia
  USING btree (conta_estrategica);

CREATE INDEX fato_movimento_faturamento_dia_idx2 ON public.fato_movimento_faturamento_dia
  USING btree (crm);

CREATE INDEX fato_movimento_faturamento_dia_idx3 ON public.fato_movimento_faturamento_dia
  USING btree (shopping_rural);

CREATE INDEX fato_movimento_faturamento_dia_idx4 ON public.fato_movimento_faturamento_dia
  USING btree (servico);

CREATE INDEX fato_movimento_faturamento_dia_idx5 ON public.fato_movimento_faturamento_dia
  USING btree (usina);

ALTER TABLE public.fato_vencimento_faturamento_dia
  ADD COLUMN usina SMALLINT;

truncate fato_vencimento_faturamento_dia;

 -- object recreation
ALTER TABLE public.fato_vencimento_faturamento_dia
  DROP CONSTRAINT fato_vencimento_faturamento_dia_idx RESTRICT;

ALTER TABLE public.fato_vencimento_faturamento_dia
  ADD CONSTRAINT fato_vencimento_faturamento_dia_idx
    PRIMARY KEY (sk_empresa, sk_data_movimento, sk_data_vencimento, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, shopping_rural, crm, conta_estrategica, sk_data_emissao, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_vencimento_faturamento_dia0eshys (
  sk_empresa INTEGER,
  sk_data_movimento INTEGER,
  sk_data_vencimento INTEGER,
  sk_produto INTEGER,
  sk_cliente INTEGER,
  sk_vendedor INTEGER,
  sk_cultura INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  sk_data_emissao INTEGER,
  qtd_nota BIGINT,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_vencimento_faturamento_dia0eshys (sk_empresa, sk_data_movimento, sk_data_vencimento, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, shopping_rural, vlr_faturamento, vlr_margem_contribuicao, sk_data_emissao, qtd_nota, usina)
SELECT sk_empresa, sk_data_movimento, sk_data_vencimento, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, shopping_rural, vlr_faturamento, vlr_margem_contribuicao, sk_data_emissao, qtd_nota, usina FROM public.fato_vencimento_faturamento_dia;

-- Drop the source table

DROP TABLE public.fato_vencimento_faturamento_dia;

-- Create the destination table

CREATE TABLE public.fato_vencimento_faturamento_dia (
  sk_empresa INTEGER NOT NULL,
  sk_data_movimento INTEGER NOT NULL,
  sk_data_vencimento INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  sk_cliente INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  sk_cultura INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_data_emissao INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  qtd_nota BIGINT,
  CONSTRAINT fato_vencimento_faturamento_dia_idx PRIMARY KEY(sk_empresa, sk_data_movimento, sk_data_vencimento, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, shopping_rural, crm, conta_estrategica, sk_data_emissao, usina),
  CONSTRAINT fato_vencimento_faturamento_dia_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk1 FOREIGN KEY (sk_data_movimento)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk2 FOREIGN KEY (sk_data_vencimento)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk3 FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk4 FOREIGN KEY (sk_cliente)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk5 FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk6 FOREIGN KEY (sk_cultura)
    REFERENCES public.dim_cultura(sk_cultura)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk7 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk8 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_vencimento_faturamento_dia_fk9 FOREIGN KEY (sk_data_emissao)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_vencimento_faturamento_dia (sk_empresa, sk_data_movimento, sk_data_vencimento, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, sk_data_emissao, conta_estrategica, crm, usina, shopping_rural, vlr_faturamento, vlr_margem_contribuicao, qtd_nota)
SELECT sk_empresa, sk_data_movimento, sk_data_vencimento, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, sk_data_emissao, conta_estrategica, crm, usina, shopping_rural, vlr_faturamento, vlr_margem_contribuicao, qtd_nota FROM fato_vencimento_faturamento_dia0eshys;

ALTER TABLE public.fato_faturamento_por_periodo
  ADD COLUMN usina SMALLINT;

truncate fato_faturamento_por_periodo;

   -- object recreation
ALTER TABLE public.fato_faturamento_por_periodo
  DROP CONSTRAINT fato_faturamento_por_periodo_idx RESTRICT;

ALTER TABLE public.fato_faturamento_por_periodo
  ADD CONSTRAINT fato_faturamento_por_periodo_idx
    PRIMARY KEY (sk_empresa, sk_segmento, sk_produto, sk_tempo_dia, sk_fornecedor, sk_cliente, sk_vendedor, sk_cultura, shopping_rural, conta_estrategica, crm, periodo, servico, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_faturamento_por_periodo0selke (
  sk_empresa INTEGER,
  sk_segmento INTEGER,
  sk_produto INTEGER,
  sk_tempo_dia INTEGER,
  sk_fornecedor INTEGER,
  sk_cliente INTEGER,
  sk_vendedor INTEGER,
  sk_cultura INTEGER,
  shopping_rural SMALLINT,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  servico SMALLINT,
  periodo INTEGER,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_faturamento_por_periodo0selke (sk_empresa, sk_segmento, sk_produto, sk_tempo_dia, sk_fornecedor, sk_cliente, sk_vendedor, sk_cultura, shopping_rural, conta_estrategica, crm, servico, periodo, vlr_faturamento, vlr_margem_contribuicao, usina)
SELECT sk_empresa, sk_segmento, sk_produto, sk_tempo_dia, sk_fornecedor, sk_cliente, sk_vendedor, sk_cultura, shopping_rural, conta_estrategica, crm, servico, periodo, vlr_faturamento, vlr_margem_contribuicao, usina FROM public.fato_faturamento_por_periodo;

-- Drop the source table

DROP TABLE public.fato_faturamento_por_periodo;

-- Create the destination table

CREATE TABLE public.fato_faturamento_por_periodo (
  sk_empresa INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  sk_tempo_dia INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_cliente INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  sk_cultura INTEGER NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  periodo INTEGER NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  CONSTRAINT fato_faturamento_por_periodo_idx PRIMARY KEY(sk_empresa, sk_segmento, sk_produto, sk_tempo_dia, sk_fornecedor, sk_cliente, sk_vendedor, sk_cultura, shopping_rural, conta_estrategica, crm, periodo, servico, usina),
  CONSTRAINT fato_faturamento_por_periodo_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk1 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk2 FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk3 FOREIGN KEY (sk_tempo_dia)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk4 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk5 FOREIGN KEY (sk_cliente)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk6 FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_fk7 FOREIGN KEY (sk_cultura)
    REFERENCES public.dim_cultura(sk_cultura)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

COMMENT ON COLUMN public.fato_faturamento_por_periodo.periodo
IS '1 = ate 90 dias, 2 = 90 - 180 dias, 3 = mais de 180 dias';

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_faturamento_por_periodo (sk_empresa, sk_segmento, sk_produto, sk_tempo_dia, sk_fornecedor, sk_cliente, sk_vendedor, sk_cultura, shopping_rural, conta_estrategica, crm, usina, servico, periodo, vlr_faturamento, vlr_margem_contribuicao)
SELECT sk_empresa, sk_segmento, sk_produto, sk_tempo_dia, sk_fornecedor, sk_cliente, sk_vendedor, sk_cultura, shopping_rural, conta_estrategica, crm, usina, servico, periodo, vlr_faturamento, vlr_margem_contribuicao FROM fato_faturamento_por_periodo0selke;

ALTER TABLE public.fato_faturamento_por_periodo_mes
  ADD COLUMN usina SMALLINT;

  truncate fato_faturamento_por_periodo_mes;

 -- object recreation
ALTER TABLE public.fato_faturamento_por_periodo_mes
  DROP CONSTRAINT fato_faturamento_por_periodo_mes_idx RESTRICT;

ALTER TABLE public.fato_faturamento_por_periodo_mes
  ADD CONSTRAINT fato_faturamento_por_periodo_mes_idx
    PRIMARY KEY (sk_empresa, sk_segmento, sk_tempo_mes, sk_fornecedor, shopping_rural, conta_estrategica, crm, periodo, servico, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_faturamento_por_periodo_mes0ujkfd (
  sk_empresa INTEGER,
  sk_segmento INTEGER,
  sk_tempo_mes INTEGER,
  sk_fornecedor INTEGER,
  shopping_rural SMALLINT,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  servico SMALLINT,
  periodo INTEGER,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_faturamento_por_periodo_mes0ujkfd (sk_empresa, sk_segmento, sk_tempo_mes, sk_fornecedor, shopping_rural, conta_estrategica, crm, servico, periodo, vlr_faturamento, vlr_margem_contribuicao, usina)
SELECT sk_empresa, sk_segmento, sk_tempo_mes, sk_fornecedor, shopping_rural, conta_estrategica, crm, servico, periodo, vlr_faturamento, vlr_margem_contribuicao, usina FROM public.fato_faturamento_por_periodo_mes;

-- Drop the source table

DROP TABLE public.fato_faturamento_por_periodo_mes;

-- Create the destination table

CREATE TABLE public.fato_faturamento_por_periodo_mes (
  sk_empresa INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_tempo_mes INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  periodo INTEGER NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  CONSTRAINT fato_faturamento_por_periodo_mes_idx PRIMARY KEY(sk_empresa, sk_segmento, sk_tempo_mes, sk_fornecedor, shopping_rural, conta_estrategica, crm, periodo, servico, usina),
  CONSTRAINT fato_faturamento_por_periodo_mes_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_mes_fk1 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_mes_fk3 FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_faturamento_por_periodo_mes_fk4 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

COMMENT ON COLUMN public.fato_faturamento_por_periodo_mes.periodo
IS '1 = ate 90 dias, 2 = 90 - 180 dias, 3 = mais de 180 dias';

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_faturamento_por_periodo_mes (sk_empresa, sk_segmento, sk_tempo_mes, sk_fornecedor, shopping_rural, conta_estrategica, crm, usina, servico, periodo, vlr_faturamento, vlr_margem_contribuicao)
SELECT sk_empresa, sk_segmento, sk_tempo_mes, sk_fornecedor, shopping_rural, conta_estrategica, crm, usina, servico, periodo, vlr_faturamento, vlr_margem_contribuicao FROM fato_faturamento_por_periodo_mes0ujkfd;

ALTER TABLE public.fato_movimento_faturamento_produto_mes
  ADD COLUMN usina SMALLINT;

ALTER TABLE public.fato_movimento_faturamento_cliente_mes
  ADD COLUMN usina SMALLINT;

  ALTER TABLE public.fato_movimento_faturamento_filial_mes
  ADD COLUMN usina SMALLINT;

  ALTER TABLE public.fato_movimento_faturamento_mes
  ADD COLUMN usina SMALLINT;

  ALTER TABLE public.fato_movimento_faturamento_vendedor_mes
  ADD COLUMN usina SMALLINT;

truncate fato_movimento_faturamento_produto_mes;
truncate fato_movimento_faturamento_cliente_mes;
truncate fato_movimento_faturamento_filial_mes;
truncate fato_movimento_faturamento_mes;
truncate fato_movimento_faturamento_vendedor_mes;

 -- object recreation
ALTER TABLE public.fato_movimento_faturamento_produto_mes
  DROP CONSTRAINT fato_movimento_faturamento_produto_mes_idx RESTRICT;

ALTER TABLE public.fato_movimento_faturamento_produto_mes
  ADD CONSTRAINT fato_movimento_faturamento_produto_mes_idx
    PRIMARY KEY (sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_produto, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_movimento_faturamento_produto_mes0bfudk (
  sk_empresa INTEGER,
  sk_tempo_mes INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  sk_produto INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  servico SMALLINT,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  qtd_movimento DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_movimento_faturamento_produto_mes0bfudk (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_produto, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete, usina)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_produto, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete, usina FROM public.fato_movimento_faturamento_produto_mes;

-- Drop the source table

DROP TABLE public.fato_movimento_faturamento_produto_mes;

-- Create the destination table

CREATE TABLE public.fato_movimento_faturamento_produto_mes (
  sk_empresa INTEGER NOT NULL,
  sk_tempo_mes INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  qtd_movimento DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  CONSTRAINT fato_movimento_faturamento_produto_mes_idx PRIMARY KEY(sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_produto, usina),
  CONSTRAINT fato_movimento_faturamento_produto_mes_fk1 FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_produto_mes_fk2 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_produto_mes_fk3 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_produto_mes_fk4 FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_produtoe_mes_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_movimento_faturamento_produto_mes (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_produto, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_produto, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete FROM fato_movimento_faturamento_produto_mes0bfudk;

 -- object recreation
ALTER TABLE public.fato_movimento_faturamento_cliente_mes
  DROP CONSTRAINT fato_movimento_faturamento_cliente_mes_idx RESTRICT;

ALTER TABLE public.fato_movimento_faturamento_cliente_mes
  ADD CONSTRAINT fato_movimento_faturamento_cliente_mes_idx
    PRIMARY KEY (sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_cliente, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_movimento_faturamento_cliente_mes0hotty (
  sk_empresa INTEGER,
  sk_tempo_mes INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  sk_cliente INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  servico SMALLINT,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_movimento_faturamento_cliente_mes0hotty (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cliente, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete, usina)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cliente, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete, usina FROM public.fato_movimento_faturamento_cliente_mes;

-- Drop the source table

DROP TABLE public.fato_movimento_faturamento_cliente_mes;

-- Create the destination table

CREATE TABLE public.fato_movimento_faturamento_cliente_mes (
  sk_empresa INTEGER NOT NULL,
  sk_tempo_mes INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_cliente INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  vlr_frete DOUBLE PRECISION,
  CONSTRAINT fato_movimento_faturamento_cliente_mes_idx PRIMARY KEY(sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_cliente, usina),
  CONSTRAINT fato_movimento_faturamento_cliente_mes_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_cliente_mes_fk1 FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_cliente_mes_fk2 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_cliente_mes_fk3 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_cliente_mes_fk4 FOREIGN KEY (sk_cliente)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_movimento_faturamento_cliente_mes (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cliente, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cliente, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete FROM fato_movimento_faturamento_cliente_mes0hotty;

 -- object recreation
ALTER TABLE public.fato_movimento_faturamento_filial_mes
  DROP CONSTRAINT fato_movimento_faturamento_filial_mes_idx RESTRICT;

ALTER TABLE public.fato_movimento_faturamento_filial_mes
  ADD CONSTRAINT fato_movimento_faturamento_filial_mes_idx
    PRIMARY KEY (sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_cultura, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_movimento_faturamento_filial_mes0xffdv (
  sk_empresa INTEGER,
  sk_tempo_mes INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  sk_cultura INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  servico SMALLINT,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_movimento_faturamento_filial_mes0xffdv (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cultura, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete, usina)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cultura, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete, usina FROM public.fato_movimento_faturamento_filial_mes;

-- Drop the source table

DROP TABLE public.fato_movimento_faturamento_filial_mes;

-- Create the destination table

CREATE TABLE public.fato_movimento_faturamento_filial_mes (
  sk_empresa INTEGER NOT NULL,
  sk_tempo_mes INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_cultura INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  vlr_frete DOUBLE PRECISION,
  CONSTRAINT fato_movimento_faturamento_filial_mes_idx PRIMARY KEY(sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_cultura, usina),
  CONSTRAINT fato_movimento_faturamento_filial_mes_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_filial_mes_fk1 FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_filial_mes_fk2 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_filial_mes_fk3 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_filial_mes_fk4 FOREIGN KEY (sk_cultura)
    REFERENCES public.dim_cultura(sk_cultura)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_movimento_faturamento_filial_mes (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cultura, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_cultura, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete FROM fato_movimento_faturamento_filial_mes0xffdv;

 -- object recreation
ALTER TABLE public.fato_movimento_faturamento_mes
  DROP CONSTRAINT fato_movimento_faturamento_mes_idx RESTRICT;

ALTER TABLE public.fato_movimento_faturamento_mes
  ADD CONSTRAINT fato_movimento_faturamento_mes_idx
    PRIMARY KEY (sk_empresa, sk_tempo_mes, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, local_faturamento, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_movimento_faturamento_mes0ruriw (
  sk_empresa INTEGER,
  sk_tempo_mes INTEGER,
  sk_produto INTEGER,
  sk_cliente INTEGER,
  sk_vendedor INTEGER,
  sk_cultura INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  qtd_movimento DOUBLE PRECISION,
  local_faturamento VARCHAR(255),
  vlr_frete DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_movimento_faturamento_mes0ruriw (sk_empresa, sk_tempo_mes, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, shopping_rural, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, local_faturamento, vlr_frete, usina)
SELECT sk_empresa, sk_tempo_mes, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, shopping_rural, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, local_faturamento, vlr_frete, usina FROM public.fato_movimento_faturamento_mes;

-- Drop the source table

DROP TABLE public.fato_movimento_faturamento_mes;

-- Create the destination table

CREATE TABLE public.fato_movimento_faturamento_mes (
  sk_empresa INTEGER NOT NULL,
  sk_tempo_mes INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  sk_cliente INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  sk_cultura INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  local_faturamento VARCHAR(255) NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  qtd_movimento DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  CONSTRAINT fato_movimento_faturamento_mes_idx PRIMARY KEY(sk_empresa, sk_tempo_mes, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, local_faturamento, usina),
  CONSTRAINT fato_movimento_faturamento_mes_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk1 FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk2 FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk3 FOREIGN KEY (sk_cliente)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk4 FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk5 FOREIGN KEY (sk_cultura)
    REFERENCES public.dim_cultura(sk_cultura)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk6 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_mes_fk7 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

ALTER TABLE public.fato_movimento_faturamento_mes
  ALTER COLUMN sk_cultura SET STATISTICS 0;

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_movimento_faturamento_mes (sk_empresa, sk_tempo_mes, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, usina, shopping_rural, local_faturamento, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete)
SELECT sk_empresa, sk_tempo_mes, sk_produto, sk_cliente, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor, conta_estrategica, crm, usina, shopping_rural, local_faturamento, vlr_faturamento, vlr_margem_contribuicao, qtd_movimento, vlr_frete FROM fato_movimento_faturamento_mes0ruriw;

-- Create indices, triggers and rules

CREATE INDEX fato_movimento_faturamento_mes_idx1 ON public.fato_movimento_faturamento_mes
  USING btree (sk_vendedor);

 -- object recreation
ALTER TABLE public.fato_movimento_faturamento_vendedor_mes
  DROP CONSTRAINT fato_movimento_faturamento_vendedor_mes_idx RESTRICT;

ALTER TABLE public.fato_movimento_faturamento_vendedor_mes
  ADD CONSTRAINT fato_movimento_faturamento_vendedor_mes_idx
    PRIMARY KEY (sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_vendedor, usina);



-- Create a temporary table

CREATE LOCAL TEMPORARY TABLE fato_movimento_faturamento_vendedor_mes0vmfkx (
  sk_empresa INTEGER,
  sk_tempo_mes INTEGER,
  sk_segmento INTEGER,
  sk_fornecedor INTEGER,
  sk_vendedor INTEGER,
  conta_estrategica SMALLINT,
  crm SMALLINT,
  shopping_rural SMALLINT,
  servico SMALLINT,
  vlr_faturamento DOUBLE PRECISION,
  vlr_margem_contribuicao DOUBLE PRECISION,
  vlr_frete DOUBLE PRECISION,
  usina SMALLINT
) ;

-- Copy the source table's data to the temporary table

INSERT INTO fato_movimento_faturamento_vendedor_mes0vmfkx (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_vendedor, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete, usina)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_vendedor, conta_estrategica, crm, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete, usina FROM public.fato_movimento_faturamento_vendedor_mes;

-- Drop the source table

DROP TABLE public.fato_movimento_faturamento_vendedor_mes;

-- Create the destination table

CREATE TABLE public.fato_movimento_faturamento_vendedor_mes (
  sk_empresa INTEGER NOT NULL,
  sk_tempo_mes INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  conta_estrategica SMALLINT NOT NULL,
  crm SMALLINT NOT NULL,
  usina SMALLINT NOT NULL,
  shopping_rural SMALLINT NOT NULL,
  servico SMALLINT NOT NULL,
  vlr_faturamento DOUBLE PRECISION DEFAULT 0,
  vlr_margem_contribuicao DOUBLE PRECISION DEFAULT 0,
  vlr_frete DOUBLE PRECISION,
  CONSTRAINT fato_movimento_faturamento_vendedor_mes_idx PRIMARY KEY(sk_empresa, sk_tempo_mes, sk_fornecedor, sk_segmento, shopping_rural, crm, conta_estrategica, servico, sk_vendedor, usina),
  CONSTRAINT fato_movimento_faturamento_vendedor_mes_fk FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_vendedor_mes_fk1 FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_vendedor_mes_fk2 FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_vendedor_mes_fk3 FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_vendedor_mes_fk4 FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

-- Copy the temporary table's data to the destination table

INSERT INTO public.fato_movimento_faturamento_vendedor_mes (sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_vendedor, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete)
SELECT sk_empresa, sk_tempo_mes, sk_segmento, sk_fornecedor, sk_vendedor, conta_estrategica, crm, usina, shopping_rural, servico, vlr_faturamento, vlr_margem_contribuicao, vlr_frete FROM fato_movimento_faturamento_vendedor_mes0vmfkx;

/* 04/07/2018 - Formulário de mapeamento entre as filiais e qual o fornecedor deve ser atribuido, no caso do remapeamento de fornecedor */
drop table if exists formulario_mapeamento_filial_fornecedor restrict;

create table if not exists formulario_mapeamento_filial_fornecedor
(
	codigo serial not null,
	cod_filial integer,
	filial varchar(255),
	area_negocio varchar(3),
	nk_fornecedor varchar(255),
	constraint formulario_mapeamento_filial_fornecedor_pkey primary key (codigo),
	constraint formulario_mapeamento_filial_fornecedor_filila_cst unique (cod_filial, filial, area_negocio)
) with (oids = false);

/* 06/07/2018 - Flávio Alexsandro - Substituindo a coluna de Tipo de Despesa, pela coluna Categoria de Despesa */
alter table formulario_solicitacao_verba_eventos
	drop column if exists tipo_despesa restrict;

alter table formulario_solicitacao_verba_eventos
	add column categoria_despesa varchar(255);

alter table formulario_solicitacao_verba_patrocinio
	drop column if exists tipo_despesa restrict;

alter table formulario_solicitacao_verba_patrocinio
	add column categoria_despesa varchar(255);


/* 19/07/2018 - Flávio Alexsandro - Adicionando duas colunas novas na dimensao Produto, para referencia ao Fornecedor e Segmento */
alter table dim_produto
	drop column if exists nk_fornecedor;
alter table dim_produto
	drop column if exists nk_segmento;

alter table dim_produto
	add column nk_fornecedor varchar(25);
alter table dim_produto
	add column nk_segmento varchar(25);

alter table dim_produto
	alter column nk_fornecedor set data type varchar(25)
		using (coalesce(codnivel1, '0') || '#' || coalesce(cod_segmento, '0') || '#' || coalesce(cod_departamento, '0'));
alter table dim_produto
	alter column nk_segmento set data type varchar(25)
		using (coalesce(cod_segmento, '0') || '#' || coalesce(cod_departamento,'0'));

/* 24/07/2018 - Flávio Alexsandro - Stage com os dados de movimento de estoque, da view do SINCO.
 *	Eh a base para o painel de posicao de estoque.
 */
drop table if exists stg_movimento_estoque cascade;

create table if not exists STG_MOVIMENTO_ESTOQUE
(
	NK_PRODUTO VARCHAR(10),
	NK_TEMPO_DIA DATE,
	NK_EMPRESA VARCHAR(12),
	VLR_CUSTO_MEDIO numeric(16,6) DEFAULT NULL,
	VLR_PRECO numeric(14,2) DEFAULT NULL,
	QTD_ESTOQUE numeric(14,2) DEFAULT 0,
	QTD_SAIDA numeric(14,2) DEFAULT 0,
	QTD_ENTRADA numeric(14,2) DEFAULT 0,
	QTD_ENTREGA_FUTURA numeric(14,2) DEFAULT 0,
	QTD_PEDIDO_VENDA numeric(14,2) DEFAULT 0,
	QTD_RESERVA numeric(14,2) DEFAULT 0,
	QTD_ESTOQUE_DISPONIVEL numeric(14,2) DEFAULT 0,
	QTD_ESTOQUE_IRREGULAR numeric(14,2) DEFAULT 0,
	QTD_TRANSITO numeric(14,2) DEFAULT 0,
	QTD_PEDIDO_COMPRA_ABERTO numeric(14,2) DEFAULT 0
) WITH (OIDS=TRUE); -- Ja que nao temos pk, usamos oid, pra acelerar as consultas.

create index stg_movimento_estoque_tempo_dia_idx on stg_movimento_estoque
	using btree (nk_tempo_dia desc nulls last);

/* 30/07/2018 - Flávio Alexsandro - Tabela auxiliar para seletor de estoque */
drop table if exists seletor_est_01_01;

create table if not exists seletor_est_01_01
(
	sk_empresa integer not null,
	sk_produto integer not null,
	sk_tempo_dia integer not null,
	constraint seletor_est_01_01_pkey primary key (sk_empresa, sk_produto, sk_tempo_dia),
	constraint seletor_est_01_01_empresa_fkey foreign key (sk_empresa) references dim_empresa(sk_empresa),
	constraint seletor_est_01_01_produto_fkey foreign key (sk_produto) references dim_produto(sk_produto),
	constraint seletor_est_01_01_tempo_dia_fkey foreign key (sk_tempo_dia) references dim_tempo_dia(sk_tempo_dia)
) with (oids=false);

create index dim_produto_segmento_fornecedor_sk_idx
	on dim_produto using btree(nk_segmento asc, nk_fornecedor asc, sk_produto);

/* 07/08/2018 - Flavio Alexsandro Silva - Alterando formacao da fato, para melhorar a performance. */

drop table if exists FATO_MOVIMENTO_ESTOQUE_DIA cascade;

create table if not exists FATO_MOVIMENTO_ESTOQUE_DIA
(
	NK_TEMPO_DIA DATE NOT NULL,
	SK_EMPRESA INTEGER NOT NULL,
	SK_PRODUTO INTEGER NOT NULL,
	SK_SEGMENTO INTEGER NOT NULL,
	SK_FORNECEDOR INTEGER NOT NULL,
	COD_REGIONAL INTEGER NOT NULL,
	COD_AREA_NEGOCIO INTEGER NOT NULL,
	VLR_ESTOQUE NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_SAIDA NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_ENTRADA NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_ENTREGA_FUTURA NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_PEDIDO_VENDA NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_RESERVA NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_ESTOQUE_DISPONIVEL NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_ESTOQUE_IRREGULAR NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_TRANSITO NUMERIC(18,6) NOT NULL DEFAULT 0,
	VLR_PEDIDO_COMPRA_ABERTO NUMERIC(18,6) NOT NULL DEFAULT 0,
	QTD_ESTOQUE numeric(14,2) NOT NULL DEFAULT 0,
	QTD_SAIDA numeric(14,2) NOT NULL DEFAULT 0,
	QTD_ENTRADA numeric(14,2) NOT NULL DEFAULT 0,
	QTD_ENTREGA_FUTURA numeric(14,2) NOT NULL DEFAULT 0,
	QTD_PEDIDO_VENDA numeric(14,2) NOT NULL DEFAULT 0,
	QTD_RESERVA numeric(14,2) NOT NULL DEFAULT 0,
	QTD_ESTOQUE_DISPONIVEL numeric(14,2) NOT NULL DEFAULT 0,
	QTD_ESTOQUE_IRREGULAR numeric(14,2) NOT NULL DEFAULT 0,
	QTD_TRANSITO NUMERIC(14,2) NOT NULL DEFAULT 0,
	QTD_PEDIDO_COMPRA_ABERTO NUMERIC(14,2) NOT NULL DEFAULT 0,
	CONSTRAINT FATO_MOVIMENTO_ESTOQUE_DIA_PKEY PRIMARY KEY (NK_TEMPO_DIA, SK_EMPRESA, SK_PRODUTO),
	CONSTRAINT FATO_MOVIMENTO_ESTOQUE_DIA_EMPRESA_FKEY FOREIGN KEY (SK_EMPRESA) REFERENCES DIM_EMPRESA(SK_EMPRESA),
	CONSTRAINT FATO_MOVIMENTO_ESTOQUE_DIA_PRODUTO_FKEY FOREIGN KEY (SK_PRODUTO) REFERENCES DIM_PRODUTO(SK_PRODUTO),
	CONSTRAINT FATO_MOVIMENTO_ESTOQUE_DIA_SEGMENTO_FKEY FOREIGN KEY (SK_SEGMENTO) REFERENCES DIM_SEGMENTO(SK_SEGMENTO),
	CONSTRAINT FATO_MOVIMENTO_ESTOQUE_DIA_FORNECEDOR_FKEY FOREIGN KEY (SK_FORNECEDOR) REFERENCES DIM_FORNECEDOR(SK_FORNECEDOR)
) WITH (OIDS=FALSE);

/* 09/08/2018 - Flavio Alexsandro Silva - Adicionando indice na dimensao, que é bastante usada. */

create index dim_fornecedor_nk_sk_idx on dim_fornecedor
	using btree(nk_fornecedor, sk_fornecedor);

drop table if exists seletor_est_01_01, seletor_est_02_01;

create table if not exists seletor_est_02_01
(
	nk_tempo_dia date not null,
	sk_empresa integer not null,
	sk_segmento integer not null,
	sk_fornecedor integer not null,
	cod_regional integer not null,
	cod_area_negocio integer not null,
	constraint seletor_est_02_01_pkey primary key (nk_tempo_dia, sk_empresa, sk_segmento, sk_fornecedor),
	constraint seletor_est_02_01_empresa_fkey foreign key (sk_empresa) references dim_empresa(sk_empresa),
	constraint seletor_est_02_01_segmento_fkey foreign key (sk_segmento) references dim_segmento(sk_segmento),
	constraint seletor_est_02_01_fornecedor_fkey foreign key (sk_fornecedor) references dim_fornecedor(sk_fornecedor)
) with (oids=false);

/* 10/08/2018 - Flavio Alexsandro Silva - Melhorando processo de atualizacao de saldo de entrega futura */
create index stg_saldo_entrega_futura_aberto_segmento_data_saldo_idx on stg_saldo_entrega_futura_aberto_segmento
	using btree(data_saldo);

drop table if exists stg_session_view_resumo_entrega_futura_sinco, stg_view_resumo_entrega_futura_sinco restrict;
create table if not exists stg_view_resumo_entrega_futura_sinco
(
	/* Keys */
	IDFILIAL integer,
	CODREGIONAL integer,
	DATA_SALDO date,
	IDCOOPERADO integer,
	IDVENDEDOR integer,
	CODPRODUTO varchar(8),
	CODSEGMENTO integer,
	CODDEPARTAMENTO integer,
	CODNIVEL1 integer,
	CODNIVEL2 integer,
	CODNIVEL3 integer,
	NUMNOTA_FISCAL bigint,
	DATA_CARGA date,
	DATa_MOVIMENTO date,
	/* Values */
	DCFILIAL varchar(30),
	FLGSERIE_NOTA_FISCAL varchar(3),
	DCCOOPERADO varchar(100),
	DCPRODUTO varchar(150),
	VLRQTDE_VENDA numeric(38,6),
	SALDO_VEF numeric(38,6),
	PRECO_UNIT numeric(38,18),
	VLRSALDO numeric(38,6),
	DCSEGMENTO varchar(100),
	DCNIVEL1 varchar(100),
	DCNIVEL2 varchar(100),
	DCNIVEL3 varchar(100)
) with (oids=false);

/* 20/08/2018 - Flavio Alexsandro Silva - Corrigindo processo de carga de performance de ctc rh,
	pois estah com erro na leitura da planilha excel */
create table if not exists public.stg_performance_despesas_ctc_rh
(
	cod_filial integer,
	filial varchar(255),
	vlr_comissao double precision,
	vlr_despesas double precision,
	"data" date,
	ctc varchar(20)
) with (oids=true);

/* 11/09/2018 - Flavio Alexsandro Silva - Adicionando indice para melhoria de performance */
CREATE INDEX fato_movimento_faturamento_dia_cultura_idx
	ON fato_movimento_faturamento_dia USING btree (sk_cultura);
CREATE INDEX fato_movimento_faturamento_dia_empresa_idx
	ON fato_movimento_faturamento_dia USING btree (sk_empresa);
CREATE INDEX fato_movimento_faturamento_dia_fornecedor_idx
	ON fato_movimento_faturamento_dia USING btree (sk_fornecedor);
CREATE INDEX fato_movimento_faturamento_dia_segmento_idx
	ON fato_movimento_faturamento_dia USING btree (sk_segmento);

CREATE INDEX fato_movimento_faturamento_dia_tempo_dia_fkey
	ON fato_movimento_faturamento_dia USING btree (sk_tempo_dia);
CREATE INDEX fato_movimento_faturamento_dia_shoprural_contaest_serv_idx
	ON fato_movimento_faturamento_dia USING btree (((shopping_rural)::integer), ((servico)::bigint), ((conta_estrategica)::integer));

/* 28/09/2018 - Flavio Alexsandro Silva - Implementação de processo de controle, validação e atualização
	para a carga de estoque */
drop table if exists dim_junk_controle_carga_estoque restrict;

create table if not exists dim_junk_controle_carga_estoque
(
	nk_tempo_dia date not null,
	vlr_estoque_fisico numeric(20,4) default 0  not null,
	flag_load boolean default false not null,
	constraint dim_junk_controle_carga_estoque_pkey primary key (nk_tempo_dia)
) with (oids=false);

create index dim_junk_controle_carga_estoque_tempo_dia_idx
	on dim_junk_controle_carga_estoque (nk_tempo_dia asc);

/* 10/10/2018 - Flavio Alexsandro Silva - Alteracao 159619 - ticket 749 - Alteracao formulario marketing */
alter table formulario_atividades_marketing
	add column data_prazo date default null,
	add column prioridade varchar(100) default null;

/* 10/10/2018 - Flavio Alexsandro Silva - Alteracao <> - ticket 2775
	- Alteracao formularios de solicitacao de verbas */
-- Formulario de Midia
alter table formulario_solicitacao_verba_midia
	rename column responsavel_midia to solicitado_por;
alter table formulario_solicitacao_verba_midia
	rename column representante to contato_veiculo;
alter table formulario_solicitacao_verba_midia
	rename column periodo_veiculacao to nk_tempo_dia_inicio_veiculacao;
alter table formulario_solicitacao_verba_midia
	add column nk_tempo_dia_termino_veiculacao date default null,
	add column qtde_insercoes_mensais integer default 0 not null,
	alter column setor set data type varchar(150),
	alter column regional set data type varchar(100),
	alter column filial set data type varchar(300),
	alter column setor set not null,
	alter column regional set not null,
	alter column filial set not null,
	add column outros_materiais varchar(255);

-- Formulario de Eventos
alter table formulario_solicitacao_verba_eventos
	alter column setor set data type varchar(150),
	alter column regional set data type varchar(100),
	alter column filial set data type varchar(300),
	alter column setor set not null,
	alter column regional set not null,
	alter column filial set not null,
	add column outros_materiais varchar(255),
	add column nk_tempo_dia_termino_evento date null,
	add column hora_termino_evento time default null;

alter table formulario_solicitacao_verba_eventos
	rename column data_evento to nk_tempo_dia_inicio_evento;
alter table formulario_solicitacao_verba_eventos
	rename column hora_evento to hora_inicio_evento;

-- Formulario de Patrocio e Doacoes
alter table formulario_solicitacao_verba_patrocinio
	alter column setor set data type varchar(150),
	alter column setor set not null,
	alter column regional set data type varchar(100),
	alter column regional set not null,
	alter column filial set data type varchar(300),
	alter column filial set not null,
	add column outros_materiais varchar(255) default null,
	add column nk_tempo_dia_termino_acao date null,
	add column hora_termino_acao time default null;

alter table formulario_solicitacao_verba_patrocinio
	rename column data_acao to nk_tempo_dia_inicio_acao;
alter table formulario_solicitacao_verba_patrocinio
	rename column hora_acao to hora_inicio_acao;

alter table formulario_solicitacao_verba_patrocinio
	drop column if exists destino;

create table if not exists formulario_forma_pagamento_solicitacao_verba
(
	codigo serial not null,
	descricao varchar(255) not null,
	constraint formulario_forma_pagamento_solicitacao_verba_pkey primary key (codigo)
) with (oids=false);

INSERT INTO formulario_forma_pagamento_solicitacao_verba (descricao) VALUES
	('BOLETO'),
	('BONIFICAÇÃO DE PRODUTOS AO FORNECEDOR'),
	('BONIFICAÇÃO DE PRODUTOS À COOPERCITRUS'),
	('DEPÓSITO BANCÁRIO'),
	('PRODUTOS DA LOJA'),
	('DIRETO AO FORNECEDOR'),
	('REBATE');


/* 22/10/2018 - Flavio Alexsandro Silva - Ticket 2775 - Solicitacao <>
	- Implementacao do ciclo 1 da Analise de Cooperados */
drop table if exists dim_cliente_ext restrict;

create table if not exists dim_cliente_ext
(
	sk_cliente integer not null,
	sk_tempo_dia_venc_cad integer null, -- Data de vencimento do cadastro
	sk_tempo_dia_ult_compra integer null, -- Data da ultima compra
	vlr_limite_credito numeric(18,4) default 0 not null, -- Valor do limite de credito
	constraint dim_cliente_ext_pkey primary key (sk_cliente),
	constraint dim_cliente_ext_cliente_fkey foreign key (sk_cliente) references dim_cliente (sk_cliente),
	constraint dim_cliente_ext_venc_cad_fkey foreign key (sk_tempo_dia_venc_cad) references dim_tempo_dia (sk_tempo_dia),
	constraint dim_cliente_ext_ult_compra_fkey foreign key (sk_tempo_dia_ult_compra) references dim_tempo_dia (sk_tempo_dia)
) with (oids = false);

comment on column dim_cliente_ext.sk_tempo_dia_venc_cad is 'Origem SINCO - Data vencimento do cadastro do cliente';
comment on column dim_cliente_ext.sk_tempo_dia_ult_compra is 'Origem SINCO - Data da Ultima Compra';
comment on column dim_cliente_ext.vlr_limite_credito is 'Origem SINCO - Valor de Limite de credito do Cooperado';

/* 25/102018 - Flavio Alexsandro Silva - Ticket 3482 - Solicitacao 159887
	- Correcao do filtro de usina para os clientes nos paineis de Margem de Contribuicao */
drop index if exists fato_movimento_faturamento_dia_idx5 restrict;
drop index if exists fato_movimento_faturamento_dia_idx2 restrict;
drop index if exists fato_movimento_faturamento_dia_idx1 restrict;

drop index if exists dim_cliente_usina_ce_sk_idx restrict;
create index dim_cliente_usina_ce_sk_idx on dim_cliente
	using btree(usina, conta_estrategica, sk_cliente);


/* 09/11/2018 - Flavio Alexsandro Silva - Adição do campo de consideracao de aprovacao */
alter table formulario_solicitacao_verba_patrocinio
	add column consideracao_aprovacao varchar(255);
alter table formulario_solicitacao_verba_eventos
	add column consideracao_aprovacao varchar(255);
alter table formulario_solicitacao_verba_midia
	add column consideracao_aprovacao varchar(255);
alter table formulario_solicitacao_verba_departamentos
	add column consideracao_aprovacao varchar(255);

/* 15/11/2018 - Flavio Alexsandro Silva - Adicionando indíce em tabela não indexada. */
drop index if exists fato_faturamento_por_periodo_tempo_dia_idx restrict;
create index fato_faturamento_por_periodo_tempo_dia_idx on FATO_FATURAMENTO_POR_PERIODO
	using btree(sk_tempo_dia asc);

drop index if exists fato_faturamento_por_periodo_servico_shop_rural_idx restrict;
create index fato_faturamento_por_periodo_servico_shop_rural_idx on FATO_FATURAMENTO_POR_PERIODO
	using btree(servico asc, shopping_rural asc);

drop index if exists dim_cliente_idx1, dim_cliente_ce_sk_idx restrict;
create index dim_cliente_ce_sk_idx on dim_cliente
	using btree(conta_estrategica asc, sk_cliente asc);

drop index if exists dim_cliente_ce_idx restrict;
create index dim_cliente_ce_idx on dim_cliente
	using btree(conta_estrategica asc);

drop index if exists fato_faturamento_por_periodo_dia_servico_shop_rural_idx restrict;
create index fato_faturamento_por_periodo_dia_servico_shop_rural_idx on FATO_FATURAMENTO_POR_PERIODO
	using btree(sk_tempo_dia asc, servico asc, shopping_rural asc);

/* 15/11/2018 - Flavio Alexsandro Silva - Adicionando nova tabela de fato, derivada de periodo - por performance */
drop table if exists fato_movimento_faturamento_cliente_periodo_mes restrict;

create table fato_movimento_faturamento_cliente_periodo_mes
(
	sk_tempo_mes integer not null,
	sk_empresa integer not null,
	sk_cliente integer not null,
	sk_segmento integer not null,
	sk_fornecedor integer not null,
	dd_periodo smallint not null,
	dd_ano_mes integer not null,
	dd_shopping_rural smallint not null,
	dd_servico smallint not null,
	vlr_faturamento double precision not null default 0,
	vlr_margem_contribuicao double precision not null default 0,


	constraint fato_movimento_faturamento_cliente_periodo_mes_tempo_mes_fkey foreign key (sk_tempo_mes) references dim_tempo_mes (sk_tempo_mes),
	constraint fato_movimento_faturamento_cliente_periodo_mes_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa),
	constraint fato_movimento_faturamento_cliente_periodo_mes_cliente_fkey foreign key (sk_cliente) references dim_cliente (sk_cliente),
	constraint fato_movimento_faturamento_dia_segmento_fkey foreign key (sk_segmento) references dim_segmento (sk_segmento),
	constraint fato_movimento_faturamento_dia_fornecedor_fkey foreign key (sk_fornecedor) references dim_fornecedor (sk_fornecedor)
) with(oids=false);

drop index if exists fato_movimento_faturamento_cliente_periodo_mes_tempo_idx restrict;
drop index if exists fato_movimento_faturamento_cliente_periodo_mes_servico_shop_rural_idx restrict;
drop index if exists fato_movimento_faturamento_cliente_periodo_periodo_idx restrict;

create index fato_movimento_faturamento_cliente_periodo_mes_tempo_idx on fato_movimento_faturamento_cliente_periodo_mes
	using btree(dd_ano_mes asc);

create index fato_movimento_faturamento_cliente_periodo_mes_servico_shop_rural_idx on fato_movimento_faturamento_cliente_periodo_mes
	using btree(dd_servico asc, dd_shopping_rural asc);

create index fato_movimento_faturamento_cliente_periodo_periodo_idx on fato_movimento_faturamento_cliente_periodo_mes
	using btree(dd_periodo asc);

/* 03/12/2018 - Flávio Alexsandro Silva - Adicionando nova tabela de fato de faturamento, derivada da mes - por performance */
drop table if exists fato_movimento_faturamento_vendedor_mes restrict;

create table fato_movimento_faturamento_vendedor_mes
(
	sk_empresa integer not null,
	sk_tempo_mes integer not null,
	sk_segmento integer not null,
	sk_fornecedor integer not null,
	sk_vendedor integer not null,
	dd_ano_mes integer not null,
	dd_perfil_produtor smallint not null,
	dd_usina smallint not null,
	dd_servico smallint not null,
	dd_shopping_rural smallint not null,
	vlr_faturamento double precision default 0 not null,
	vlr_margem_contribuicao double precision default 0 not null,
	vlr_frete double precision default 0 not null,
	qtd_movimento double precision default 0 not null,

	constraint fato_movimento_faturamento_vendedor_mes_pkey primary key (sk_empresa, sk_tempo_mes, sk_segmento,
		sk_fornecedor, sk_vendedor, dd_ano_mes, dd_perfil_produtor, dd_usina, dd_servico, dd_shopping_rural),
	constraint fato_movimento_faturamento_vendedor_mes_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa),
	constraint fato_movimento_faturamento_vendedor_mes_tempo_mes_fkey foreign key (sk_tempo_mes) references dim_tempo_mes (sk_tempo_mes),
	constraint fato_movimento_faturamento_vendedor_mes_segmento_fkey foreign key (sk_segmento) references dim_segmento (sk_segmento),
	constraint fato_movimento_faturamento_vendedor_mes_fornecedor_fkey foreign key (sk_fornecedor) references dim_fornecedor (sk_fornecedor),
	constraint fato_movimento_faturamento_vendedor_mes_vendedor_fkey foreign key (sk_vendedor) references dim_vendedor (sk_vendedor)
) with(oids=false);

drop index if exists fato_movimento_faturamento_vendedor_mes_serv_shoprural_idx restrict;
create index fato_movimento_faturamento_vendedor_mes_serv_shoprural_idx on
	fato_movimento_faturamento_vendedor_mes using btree(dd_servico asc, dd_shopping_rural asc);

drop index if exists fato_movimento_faturamento_vendedor_mes_ano_mes_idx restrict;
create index fato_movimento_faturamento_vendedor_mes_ano_mes_idx
	on fato_movimento_faturamento_vendedor_mes using btree(dd_ano_mes asc);

drop index if exists fato_movimento_faturamento_vendedor_mes_perfil_prod_idx restrict;
create index fato_movimento_faturamento_vendedor_mes_perfil_prod_idx
	on fato_movimento_faturamento_vendedor_mes using btree(dd_perfil_produtor asc, dd_usina asc);

/* 05/12/2018 - Flávio Alexsandro Silva - Adicionando nova tabela de fato de faturamento, derivada da mes - por performance */
comment on table fato_movimento_faturamento_vendedor_mes is 'Fato recriado integralmente todo dia, para atualização das dimensoes degeneradas de usina e perfil do produtor, que vem do cliente.';

drop table if exists fato_movimento_faturamento_produto_mes restrict;

create table fato_movimento_faturamento_produto_mes
(
	sk_empresa integer not null,
	sk_tempo_mes integer not null,
	sk_produto integer not null,
	dd_ano_mes integer not null,
	dd_perfil_produtor smallint not null,
	dd_usina smallint not null,
	dd_servico smallint not null,
	dd_shopping_rural smallint not null,
	vlr_faturamento double precision default 0 not null,
	vlr_margem_contribuicao double precision default 0 not null,
	vlr_frete double precision default 0 not null,
	qtd_movimento double precision default 0 not null,

	constraint fato_movimento_faturamento_produto_mes_pkey primary key (sk_empresa, sk_tempo_mes, sk_produto,
		dd_ano_mes, dd_perfil_produtor, dd_usina, dd_servico, dd_shopping_rural),
	constraint fato_movimento_faturamento_produto_mes_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa),
	constraint fato_movimento_faturamento_produto_mes_tempo_mes_fkey foreign key (sk_tempo_mes) references dim_tempo_mes (sk_tempo_mes),
	constraint fato_movimento_faturamento_produto_mes_produto_fkey foreign key (sk_produto) references dim_produto (sk_produto)
) with(oids=false);

drop index if exists fato_movimento_faturamento_produto_mes_serv_shoprural_idx restrict;
create index fato_movimento_faturamento_produto_mes_serv_shoprural_idx on
	fato_movimento_faturamento_produto_mes using btree(dd_servico asc, dd_shopping_rural asc);

drop index if exists fato_movimento_faturamento_produto_mes_ano_mes_idx restrict;
create index fato_movimento_faturamento_produto_mes_ano_mes_idx on
	fato_movimento_faturamento_produto_mes using btree(dd_ano_mes asc);

drop index if exists fato_movimento_faturamento_produto_mes_perfil_prod_idx restrict;
create index fato_movimento_faturamento_produto_mes_perfil_prod_idx on
	fato_movimento_faturamento_produto_mes using btree(dd_perfil_produtor asc, dd_usina asc);

comment on table fato_movimento_faturamento_produto_mes is 'Fato recriada integralmente todo dia, para atualizacao das dimensoes degeneradas de usina e perfil do produtor, que vem da dimensao de cliente.';

/* 06/12/2018 - Flavio Alexsandro Silva - Alterando indices da fato de faturamento de vendedores */
drop index if exists fato_movimento_faturamento_vendedor_mes_perfil_prod_idx restrict;
drop index if exists fato_movimento_faturamento_vendedor_mes_ano_mes_idx restrict;
drop index if exists fato_movimento_faturamento_vendedor_mes_serv_shoprural_idx restrict;
drop index if exists test restrict;
drop index if exists fato_movimento_faturamento_vendedor_mes_perfprod_anomes_serv_shoprural_idx restrict;
drop index if exists fato_movimento_faturamento_vendedor_mes_anomes_perfprod_idx restrict;
create index fato_movimento_faturamento_vendedor_mes_anomes_perfprod_idx on
	fato_movimento_faturamento_vendedor_mes using btree(dd_ano_mes asc, dd_shopping_rural asc, dd_servico asc, dd_perfil_produtor asc, dd_usina asc);

vacuum full fato_movimento_faturamento_vendedor_mes;
vacuum analyze fato_movimento_faturamento_vendedor_mes;

/* 10/12/2018 - Flavio Alexsandro Silva - Implementacao de indices para a dimensao cliente */
drop index if exists dim_cliente_perfprod_idx restrict;
create index dim_cliente_perfprod_idx on dim_cliente
	using btree(conta_estrategica asc, sk_cliente asc);
vacuum full dim_cliente;
vacuum analyze dim_cliente;

/* 14/12/2018 - Flavio Alexsandro Silva - Removendo SP, substituindo por view, para migracao de base de dados para a versao 11 */
drop view if exists view_pdl_avaliacao_periodo restrict;
create view view_pdl_avaliacao_periodo as
with
	dap_data as
	(
		select
			codigo,
			sk_avaliacao_pdl,
			to_date('01/' || dap.mes_ano_inicial, 'DD/MM/YYYY') as data_inicial,
			to_date('01/' || dap.mes_ano_final, 'DD/MM/YYYY') as data_final
		from dim_avaliacao_pdl dap
	),
	periodo_aval_pdl as
	(
		select distinct
			dd.sk_avaliacao_pdl,
			dd.data_final + interval '1 MONTH' as data_inicial,
			dd.data_final + (
					cast(
						abs(
							extract(month from dd.data_inicial) -
							extract(month from dd.data_final)
						) + 1 as integer
					) * interval '1 MONTH'
				) as data_final
		from
			dap_data dd
			inner join aux_avaliacao_pdl ap on ap.codigo = dd.codigo
				and ap.gerar_dados_acumulados = 1
	)
select
	dtm.data_primeiro_dia_mes as data_inicio,
	dtm.data_ultimo_dia_mes as data_fim,
	pap.sk_avaliacao_pdl,
	dtm.sk_tempo_mes
/**
	,pap.data_inicial,
	pap.data_final,
	dtm.nk_tempo_mes
**/
from
	dim_tempo_mes dtm
	inner join periodo_aval_pdl pap on true
where
	dtm.data_primeiro_dia_mes >= pap.data_inicial
	and dtm.data_primeiro_dia_mes <= pap.data_final
order by dtm.ano, dtm.mes;

/* 14/12/2018 - Flavio Alexsandro Silva - Implementando view para simplificar busca pelo periodo de retroacao */
drop view if exists view_periodo_retroacao_mes restrict;
create view view_periodo_retroacao_mes as
with
	junk as
	(
		select (current_date - djc.diasretroagircarga) as data_retroacao
		from dim_junk_configuracao djc
		limit 1
	),
	mes_inicio as
	(
		select dtm.data_primeiro_dia_mes
		from
			dim_tempo_mes dtm
			inner join junk j on true
		where dtm.nk_tempo_mes = to_char(j.data_retroacao, 'MM/YYYY')
	),
	mes_fim as
	(
		select dtm.data_ultimo_dia_mes
		from dim_tempo_mes dtm
		where dtm.nk_tempo_mes = to_char(current_date, 'MM/YYYY')
	)
select
	mi.data_primeiro_dia_mes as data_inicio,
	mf.data_ultimo_dia_mes as data_fim
from
	mes_inicio mi
	inner join mes_fim mf on true;

/* 18/12/2018 - Flavio Alexsandro Silva - Remover function que não é mais utilizada. */
drop function if exists sp_aux_interval_data(date, date) restrict;
drop function if exists truncate_all_exceto_junk_e_build() restrict;

/* 18/12/2018 - Flavio Alexsandro Silva - Implementando a fato de contas a receber com base nos cooperados. */
drop table if exists fato_titulo_cliente_empresa_dia restrict;
create table fato_titulo_cliente_empresa_dia
(
	sk_fato_titulo_cliente_empresa_dia serial not null,
	sk_cliente integer not null,
	sk_tempo_dia_emissao integer not null,
	sk_tempo_dia_vencimento integer,
	sk_tempo_dia_pagamento integer,
	dd_ano_mes_dia integer not null,
	dd_empresa smallint not null,
	dd_num_titulo varchar(10) not null,
	dd_serie_titulo varchar(10) default null,
	dd_situacao smallint not null,
	dd_desc_situacao varchar(100) not null, -- Descricao da situacao
	vlr_titulo numeric(18,2) not null default 0,

	constraint fato_titulo_cliente_empresa_dia_pkey primary key (sk_fato_titulo_cliente_empresa_dia),
	constraint fato_titulo_cliente_empresa_dia_cliente_fkey foreign key (sk_cliente) references dim_cliente (sk_cliente),
	constraint fato_titulo_cliente_empresa_dia_emissao_fkey foreign key (sk_tempo_dia_emissao) references dim_tempo_dia (sk_tempo_dia),
	constraint fato_titulo_cliente_empresa_dia_vencimento_fkey foreign key (sk_tempo_dia_vencimento) references dim_tempo_dia (sk_tempo_dia),
	constraint fato_titulo_cliente_empresa_dia_pagamento_fkey foreign key (sk_tempo_dia_pagamento) references dim_tempo_dia (sk_tempo_dia)
) with(oids=false);

comment on column fato_titulo_cliente_empresa_dia.dd_desc_situacao is 'Coluna dedicada a descrever a situacao dada pela coluna dd_situacao.';
comment on column fato_titulo_cliente_empresa_dia.dd_ano_mes_dia is 'A data aqui eh a data de emissao, caso nao exista eh a data de vencimento.';

drop index if exists fato_titulo_cliente_empresa_dia_emissao_idx restrict;
create index fato_titulo_cliente_empresa_dia_emissao_idx on fato_titulo_cliente_empresa_dia
	using btree(sk_tempo_dia_emissao asc);

drop index if exists fato_titulo_cliente_empresa_dia_cliente_idx restrict;
create index fato_titulo_cliente_empresa_dia_cliente_idx on fato_titulo_cliente_empresa_dia
	using btree(sk_cliente asc);

drop index if exists fato_titulo_cliente_empresa_dia_ano_mes_dia_idx restrict;
create index fato_titulo_cliente_empresa_dia_ano_mes_dia_idx on fato_titulo_cliente_empresa_dia
	using btree(dd_ano_mes_dia asc);

/* 19/12/2018 - Flavio Alexsandro Silva - Implementando o controle de carga generico. */
drop table if exists dim_junk_controle_carga restrict;
create table if not exists dim_junk_controle_carga
(
	nk_tempo_dia date not null,
	"table" varchar(255) not null,
	field varchar(100) not null,
	value numeric(20,4) default 0 not null,
	flag_load boolean default false not null,
	constraint dim_junk_controle_carga_pkey primary key (nk_tempo_dia, "table", field)
) with (oids=false);

drop index if exists dim_junk_controle_carga_tempo_dia_idx restrict;
drop index if exists dim_junk_controle_carga_table_field_idx restrict;
create index dim_junk_controle_carga_table_field_idx
	on dim_junk_controle_carga ("table" asc, field asc);

/* 19/12/2018 - Flavio Alexsandro Silva - Acrescentando a coluna de filial na fato. */
truncate table fato_titulo_cliente_empresa_dia restrict;
alter table if exists fato_titulo_cliente_empresa_dia
	drop column if exists sk_empresa restrict,
	add column sk_empresa integer not null,
	add constraint fato_titulo_cliente_empresa_dia_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa);

/* 27/12/2018 - Flavio Alexsandro Silva
- Removendo NK de empresa, pois nao teremos view com os dados das outras empresas.
- Adicionando dados de garantia e de tipo de cobranca.
- Adicionando uma dimensao para mapeamento de cobrancao de titulos.*/
truncate table fato_titulo_cliente_empresa_dia restrict;
alter table if exists fato_titulo_cliente_empresa_dia
	drop column if exists sk_empresa restrict,
	drop column if exists dd_tipo_garantia restrict,
	drop column if exists nk_tipo_cobranca_titulo restrict,
	drop column if exists dd_filial restrict,
	add column dd_tipo_garantia varchar(10),
	add column nk_tipo_cobranca_titulo varchar(1),
	add column dd_filial integer default -1 not null;

drop table if exists dim_tipo_cobranca_titulos restrict;
create table dim_tipo_cobranca_titulos
(
	sk_tipo_cobranca_titulo serial not null,
	nk_tipo_cobranca_titulo varchar(1) not null,
	tipo_cobranca_titulo varchar(255),
	constraint dim_tipo_cobranca_titulos_pkey primary key (sk_tipo_cobranca_titulo)
) with(oids=false);

insert into dim_tipo_cobranca_titulos (nk_tipo_cobranca_titulo, tipo_cobranca_titulo)
	values
	('I','I=ABATIMENTO COM CREDITO DE ICMS'),
	('P','P=TÍTULO BLOQUEADO PARA PRORROGACAO'),
	('E','E=ENVIADO P/ BANCO (AGUARDANDO NOSSO NÚMERO)'),
	('F','F=FINAME'),
	('S','S=CHEQUE CUSTODIADO'),
	('B','B=BOLETO'),
	('C','C=CARTEIRA');

/* 28/12/2018 - Flavio Alexsandro Silva
- Implementação da dimensão de tipo de garantia;
- Implementação do formulário de valor de comodite;
- Implementação da fato de produção por cliente (cooperado).*/
drop table if exists dim_tipo_garantia_titulo restrict;
create table dim_tipo_garantia_titulo
(
	sk_tipo_garantia_titulo serial not null,
	nk_tipo_garantia_titulo varchar(4) not null,
	tipo_garantia_titulo varchar(255),
	constraint dim_tipo_garantia_titulo_pkey primary key (sk_tipo_garantia_titulo)
) with(oids=false);

truncate table dim_tipo_garantia_titulo restrict;
insert into dim_tipo_garantia_titulo (nk_tipo_garantia_titulo, tipo_garantia_titulo)
	values
	('AVA','AVAL'),
	('CRP','CEDULA RURAL PIGNORATICIA'),
	('CRPH','CEDULA RURAL PIGNORATICIA HIPOTECARIA'),
	('ICC','CESSÃO DE CREDITOS'),
	('ALF','ALIENÇÃO'),
	('CRH','HIPOTECA'),
	('NCR','NOTA DE CREDITO RURAL'),
	('APC','AGUARDANDO PROCESSO CONVÊNIOS'),
	('AGP','AGUARDANDO GARANTIA PENDENTE'),
	('NCP','GARANTIA APROVADA'),
	('1','HIPOTECA'),
	('2','PENHOR'),
	('3','PENHOR + HIPOTECA'),
	('4','PENHOR + AVAL'),
	('5','PENHOR + CESSÃO + AVAL'),
	('6','ESCRITURA PÚBLICA'),
	('7','CEDULA RURAL PIGNORATICIA'),
	('8','AVAL'),
	('9','ALIENAÇÃO FIDUCIARIA'),
	('10','CEDULA RURAL PIGNORATICIA + HIPOTECA'),
	('11','CEDULA RURAL PIGNORATICIA + AVAL'),
	('12','CEDULA RURAL PIGNORATICIA + CESSÃO'),
	('13','CEDULA RURAL PIGNORATICIA + ALIENAÇÃO'),
	('14','HIPOTECA + AVAL'),
	('16','CEDULA RURAL PIGNORATICIA CANA BARTER RAIZEN'),
	('17','ALIENAÇÃO + AVAL'),
	('18','CESSÃO DE DIREITOS CREDITORIOS'),
	('26','INTERCOOPERAÇÃO CREDICITRUS'),
	('29','INTERCOOPERAÇÃO SANTANDER'),
	('30','INTERCOOPERAÇÃO BCO. DO BRASIL');

drop table if exists formulario_commodity_cultura restrict;
drop table if exists formulario_comodite_cultura restrict;
create table formulario_comodite_cultura
(
	codigo serial not null,
	nk_cultura varchar(5) not null,
	cultura varchar(255) not null,
	vlr_comodite numeric(18,4) not null default 0,
	constraint formulario_comodite_cultura_pkey primary key (codigo),
	constraint formulario_comodite_cultura_cst unique (nk_cultura)
) with(oids=false);

truncate table formulario_comodite_cultura restrict;
insert into formulario_comodite_cultura (nk_cultura, cultura, vlr_comodite)
	select
		nk_cultura,
		cultura,
		0
	from dim_cultura;

drop table if exists fato_producao_cliente_cultura restrict;
create table fato_producao_cliente_cultura
(
	sk_cliente integer not null,
	sk_cultura integer not null,
	qtd_producao numeric(18,2) default 0 not null,
	vlr_area numeric(18,2) default 0 not null,
	constraint fato_producao_cliente_cultura_pkey primary key (sk_cliente, sk_cultura),
	constraint fato_producao_cliente_cultura_cliente_fkey foreign key (sk_cliente) references dim_cliente (sk_cliente),
	constraint fato_producao_cliente_cultura_cultura_fkey foreign key (sk_cultura) references dim_cultura (sk_cultura)
) with(oids=false);

/* 18/02/2018 - Flavio Alexsandro Silva
- Implementação da fato de faturamento otimizada pra calculo do ticket medio.*/
drop table if exists fato_movimento_faturamento_ticket_dia cascade;

create table fato_movimento_faturamento_ticket_dia
(
	sk_empresa integer not null,
	sk_cliente integer not null,
	sk_fornecedor integer not null,
	sk_segmento integer not null,
	sk_cultura integer not null,
	dd_ano_mes_dia integer not null,

	dd_nota_fiscal bigint not null,
	dd_flg_nota_fiscal varchar(10) not null,

	dd_servico smallint not null,
	dd_shopping_rural smallint not null,
	dd_cod_funcao smallint not null,
	dd_perfil_produtor smallint not null,
	vlr_faturamento double precision not null,
	vlr_frete double precision not null,

	constraint fato_movimento_faturamento_ticket_dia_pkey primary key
		(sk_empresa, sk_cliente, sk_fornecedor, sk_segmento, sk_cultura,
		dd_ano_mes_dia, dd_nota_fiscal, dd_servico, dd_shopping_rural, dd_cod_funcao,
		dd_perfil_produtor, dd_flg_nota_fiscal),
	constraint fato_movimento_faturamento_ticket_dia_cliente_fkey foreign key
		(sk_cliente) references dim_cliente (sk_cliente),
	constraint fato_movimento_faturamento_ticket_dia_empresa_fkey foreign key
		(sk_empresa) references dim_empresa (sk_empresa),
	constraint fato_movimento_faturamento_ticket_dia_fornecedor_fkey foreign key
		(sk_fornecedor) references dim_fornecedor (sk_fornecedor),
	constraint fato_movimento_faturamento_ticket_dia_segmento_fkey foreign key
		(sk_segmento) references dim_segmento (sk_segmento),
	constraint fato_movimento_faturamento_ticket_dia_cultura_fkey foreign key
		(sk_cultura) references dim_cultura (sk_cultura)
) partition by range(dd_ano_mes_dia) with(oids=false);

drop index if exists fato_movimento_faturamento_ticket_dia_data_idx restrict;
create index fato_movimento_faturamento_ticket_dia_data_idx
	on fato_movimento_faturamento_ticket_dia
	using btree(dd_ano_mes_dia asc);



CREATE TABLE public.fato_movimento_faturamento_dia_aux (
  sk_tempo_dia INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  sk_cliente INTEGER NOT NULL,
  sk_municipio_faturamento INTEGER NOT NULL,
  dd_ano_mes_dia INTEGER NOT NULL,
  dd_nota_fiscal BIGINT NOT NULL,
  dd_flg_nota_fiscal VARCHAR(10) NOT NULL,
  sk_tempo_dia_vencimento INTEGER NOT NULL,
  CONSTRAINT fato_movimento_faturamento_dia_aux_pkey PRIMARY KEY(sk_tempo_dia_vencimento, sk_tempo_dia, sk_empresa, sk_produto, sk_cliente, sk_municipio_faturamento, dd_ano_mes_dia, dd_nota_fiscal, dd_flg_nota_fiscal),
  CONSTRAINT fato_movimento_faturamento_dia_aux_cliente_fkey FOREIGN KEY (sk_cliente)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_aux_empresa_fkey FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_aux_fk FOREIGN KEY (sk_tempo_dia_vencimento)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_aux_fornecedor_fkey FOREIGN KEY (sk_municipio_faturamento)
    REFERENCES public.dim_municipio_faturamento(sk_municipio_faturamento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_aux_produto_fkey FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_movimento_faturamento_dia_aux_tempo_dia_fkey FOREIGN KEY (sk_tempo_dia)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

CREATE INDEX fato_movimento_faturamento_dia_aux_ano_mes_dia_idx ON public.fato_movimento_faturamento_dia_aux
  USING btree (dd_ano_mes_dia);

ALTER TABLE public.fato_movimento_faturamento_dia_aux
  OWNER TO vistrabi;

CREATE INDEX fato_movimento_faturamento_dia_aux_ano_mes_dia_idx ON public.fato_movimento_faturamento_dia_aux
  USING btree (dd_ano_mes_dia);

ALTER TABLE public.dim_produto
  ADD COLUMN similaridade VARCHAR(255);

ALTER TABLE public.stg_produto
  ADD COLUMN dcsimilar VARCHAR(100);


/* 30/05/2019 - Flavio Alexsandro Silva - Adicionando novo schema, para armazenar somente as fatos particionadas.
	Re-Implementação da fato de titulos, utilizando os recursos do postgresql 11 de declarative partitioning.*/
drop table if exists public.fato_titulo_cliente_empresa_dia cascade;
drop table if exists partitioned.fato_titulo_cliente_empresa_dia restrict;
drop table if exists dim_tipo_cobranca_titulo, dim_tipo_cobranca_titulos restrict;

create table dim_tipo_cobranca_titulo
(
	sk_tipo_cobranca_titulo serial not null,
	nk_tipo_cobranca_titulo varchar(1) not null,
	tipo_cobranca_titulo varchar(255),
	constraint dim_tipo_cobranca_titulo_pkey primary key (sk_tipo_cobranca_titulo)
) with(oids=false);

insert into dim_tipo_cobranca_titulo (nk_tipo_cobranca_titulo, tipo_cobranca_titulo)
	values
	('I','I=ABATIMENTO COM CREDITO DE ICMS'),
	('P','P=TÍTULO BLOQUEADO PARA PRORROGACAO'),
	('E','E=ENVIADO P/ BANCO (AGUARDANDO NOSSO NÚMERO)'),
	('F','F=FINAME'),
	('S','S=CHEQUE CUSTODIADO'),
	('B','B=BOLETO'),
	('C','C=CARTEIRA');

drop table if exists dim_tipo_garantia_titulo, dim_tipo_garantia_titulos restrict;
create table dim_tipo_garantia_titulo
(
	sk_tipo_garantia_titulo serial not null,
	nk_tipo_garantia_titulo varchar(4) not null,
	tipo_garantia_titulo varchar(255),
	constraint dim_tipo_garantia_titulo_pkey primary key (sk_tipo_garantia_titulo)
) with(oids=false);

truncate table dim_tipo_garantia_titulo restrict;
insert into dim_tipo_garantia_titulo (nk_tipo_garantia_titulo, tipo_garantia_titulo)
	values
	('AVA','AVAL'),
	('CRP','CEDULA RURAL PIGNORATICIA'),
	('CRPH','CEDULA RURAL PIGNORATICIA HIPOTECARIA'),
	('ICC','CESSÃO DE CREDITOS'),
	('ALF','ALIENÇÃO'),
	('CRH','HIPOTECA'),
	('NCR','NOTA DE CREDITO RURAL'),
	('APC','AGUARDANDO PROCESSO CONVÊNIOS'),
	('AGP','AGUARDANDO GARANTIA PENDENTE'),
	('NCP','GARANTIA APROVADA'),
	('1','HIPOTECA'),
	('2','PENHOR'),
	('3','PENHOR + HIPOTECA'),
	('4','PENHOR + AVAL'),
	('5','PENHOR + CESSÃO + AVAL'),
	('6','ESCRITURA PÚBLICA'),
	('7','CEDULA RURAL PIGNORATICIA'),
	('8','AVAL'),
	('9','ALIENAÇÃO FIDUCIARIA'),
	('10','CEDULA RURAL PIGNORATICIA + HIPOTECA'),
	('11','CEDULA RURAL PIGNORATICIA + AVAL'),
	('12','CEDULA RURAL PIGNORATICIA + CESSÃO'),
	('13','CEDULA RURAL PIGNORATICIA + ALIENAÇÃO'),
	('14','HIPOTECA + AVAL'),
	('16','CEDULA RURAL PIGNORATICIA CANA BARTER RAIZEN'),
	('17','ALIENAÇÃO + AVAL'),
	('18','CESSÃO DE DIREITOS CREDITORIOS'),
	('26','INTERCOOPERAÇÃO CREDICITRUS'),
	('29','INTERCOOPERAÇÃO SANTANDER'),
	('30','INTERCOOPERAÇÃO BCO. DO BRASIL');

create schema if not exists partitioned;

CREATE TABLE if not exists partitioned.fato_titulo_cliente_empresa_dia
(
	sk_fato_titulo_cliente_empresa_dia serial NOT NULL,
	sk_cliente integer NOT NULL,
	sk_tempo_dia_emissao integer NOT NULL,
	sk_tempo_dia_vencimento integer NULL,
	sk_tempo_dia_pagamento integer NULL,
	sk_tipo_garantia_titulo integer null,
	sk_tipo_cobranca_titulo integer null,
	dd_ano_mes_dia integer NOT NULL, -- A data aqui eh a data de emissao, caso nao exista eh a data de vencimento.
	-- dd_ano_semestre smallint not null, -- Campo para uso pelo particionamento: Ano / Semestre -> 20191
	dd_filial integer NOT NULL DEFAULT '-1'::integer,
	dd_empresa smallint NOT NULL,
	dd_tipo_titulo smallint not null,
	dd_num_titulo varchar(10) NOT NULL,
	dd_serie_titulo varchar(10) NULL DEFAULT NULL,
	dd_situacao smallint NOT NULL,
	dd_desc_situacao varchar(100) NOT NULL, -- Coluna dedicada a descrever a situacao dada pela coluna dd_situacao.
	-- dd_tipo_garantia varchar(10) NULL,
	-- nk_tipo_cobranca_titulo varchar(1) NULL,
	vlr_titulo numeric(18,2) NOT NULL DEFAULT 0,
	CONSTRAINT fato_titulo_cliente_empresa_dia_pkey PRIMARY KEY (sk_fato_titulo_cliente_empresa_dia, dd_ano_mes_dia),
	CONSTRAINT fato_titulo_cliente_empresa_dia_cliente_fkey FOREIGN KEY (sk_cliente) REFERENCES dim_cliente(sk_cliente),
	CONSTRAINT fato_titulo_cliente_empresa_dia_emissao_fkey FOREIGN KEY (sk_tempo_dia_emissao) REFERENCES dim_tempo_dia(sk_tempo_dia),
	CONSTRAINT fato_titulo_cliente_empresa_dia_pagamento_fkey FOREIGN KEY (sk_tempo_dia_pagamento) REFERENCES dim_tempo_dia(sk_tempo_dia),
	CONSTRAINT fato_titulo_cliente_empresa_dia_vencimento_fkey FOREIGN KEY (sk_tempo_dia_vencimento) REFERENCES dim_tempo_dia(sk_tempo_dia),
	constraint fato_titulo_cliente_empresa_dia_tipo_garantia_fkey foreign key (sk_tipo_garantia_titulo) references dim_tipo_garantia_titulo (sk_tipo_garantia_titulo),
	constraint fato_titulo_cliente_empresa_dia_tipo_cobranca_fkey foreign key (sk_tipo_cobranca_titulo) references dim_tipo_cobranca_titulo (sk_tipo_cobranca_titulo)
) partition by range (dd_ano_mes_dia) WITH (OIDS=FALSE);

drop index if exists fato_titulo_cliente_empresa_dia_ano_mes_dia_idx restrict;
drop index if exists fato_titulo_cliente_empresa_dia_cliente_idx  restrict;
drop index if exists fato_titulo_cliente_empresa_dia_emissao_idx restrict;

CREATE INDEX fato_titulo_cliente_empresa_dia_ano_mes_dia_idx
	ON partitioned.fato_titulo_cliente_empresa_dia
	USING btree (dd_ano_mes_dia);
CREATE INDEX fato_titulo_cliente_empresa_dia_cliente_idx
	ON partitioned.fato_titulo_cliente_empresa_dia
	USING btree (sk_cliente);
CREATE INDEX fato_titulo_cliente_empresa_dia_emissao_idx
	ON partitioned.fato_titulo_cliente_empresa_dia
	USING btree (sk_tempo_dia_emissao);

COMMENT ON COLUMN partitioned.fato_titulo_cliente_empresa_dia.dd_ano_mes_dia IS 'A data aqui eh a data de emissao, caso nao exista eh a data de vencimento.';
COMMENT ON COLUMN partitioned.fato_titulo_cliente_empresa_dia.dd_desc_situacao IS 'Coluna dedicada a descrever a situacao dada pela coluna dd_situacao.';

/* 21/06/2019 - Flavio Alexsandro Silva - Adicionando stage de faturamento, com base nos padroes do DW que usamos,
	para atualizacao dos dados com alta frequencia (de hora em hora). */
drop table if exists stg_movimento_faturamento_dia_realtime restrict;

create table if not exists stg_movimento_faturamento_dia_realtime
(
    nk_empresa varchar(10),
    nk_vendedor varchar(10),
    nk_cultura varchar(10),
    nk_produto varchar(10),
    nk_cliente varchar(10),
    nk_municipio_faturamento varchar(50),
    nk_tempo_dia date default null,
    nk_tempo_dia_emissao date default null,
    nk_tempo_dia_vencimento date default null,
    dd_nota_fiscal bigint,
    dd_serie_nota_fiscal varchar(3),
    dd_origem varchar(15),
    vlr_nota numeric(18,4),
    vlr_venda numeric(20,4),
    vlr_frete numeric(16,4),
    vlr_devolucao numeric(20,6),
    vlr_desconto_icms numeric(20,6),
    vlr_margem_contribuicao numeric(20,4),
    vlr_margem_devolucao numeric(20,4),
    vlr_perc_margem numeric(12,4),
    vlr_perc_markup numeric(12,4),
    vlr_faturamento numeric(20,4),
    qtd_movimento numeric(18,4),
    qtd_venda numeric(16,4),
    qtd_devolucao numeric(16,4)
) with (oids=false);

drop index stg_movimento_faturamento_dia_cliente_realtime_idx restrict;
drop index stg_movimento_faturamento_dia_data_realtime_idx restrict;

create index stg_movimento_faturamento_dia_cliente_realtime_idx
	on stg_movimento_faturamento_dia_realtime
	using btree (nk_cliente asc);

create index stg_movimento_faturamento_dia_data_realtime_idx
	on stg_movimento_faturamento_dia_realtime
	using btree (nk_tempo_dia, dd_origem asc);

drop table if exists formulario_segmento_posicao_venda restrict;

create table if not exists formulario_segmento_posicao_venda
(
    sk_segmento integer not null,
    nk_segmento varchar(255) not null,
    cod_segmento varchar(10) not null,
    cod_departamento varchar(10) not null,
    segmento varchar(255),
    departamento varchar(255),
    label_segmento_no_painel varchar(255) default 'NAO INFORMADO',
    dd_aba_painel varchar(255),
    dd_flag_desconsiderar boolean not null default false,

    constraint formulario_segmento_posicao_venda_pkey primary key (sk_segmento)
) with(oids=false);

insert into formulario_segmento_posicao_venda
    (sk_segmento, nk_segmento, cod_segmento, cod_departamento, segmento,
    departamento, label_segmento_no_painel, dd_aba_painel, dd_flag_desconsiderar)
select
    ds.sk_segmento,
    ds.nk_segmento,
    ds.cod_segmento,
    ds.cod_departamento,
    ds.segmento,
    ds.departamento,
    trim(ds.segmento),
    'INSUMOS',
    false
from dim_segmento ds
order by cod_segmento, cod_departamento;

/* 06/08/2019 - Flavio Alexsandro Silva - Alterando formulario para utilizar
    coluna com valores de character, devido a incapacidade do Vistra de
    entender booleano
*/
alter table if exists formulario_segmento_posicao_venda
	alter column dd_flag_desconsiderar set data type varchar(1)
	using (
		case
			when dd_flag_desconsiderar = true then '1'
			else '0'
		end
	);
alter table if exists formulario_segmento_posicao_venda
	alter column dd_flag_desconsiderar set default '0',
	drop constraint if exists formulario_segmento_posicao_venda_flag_cst restrict,
	add constraint formulario_segmento_posicao_venda_flag_cst check (dd_flag_desconsiderar in ('0', '1'));

/* 06/09/2019 - Flavio Alexsandro Silva - Alterando stage de carga horaria
    pois estava apresentando variacao do valor total no dia, por causa
    de arredondamento.
**/
alter table if exists stg_movimento_faturamento_dia_realtime
    alter column vlr_nota set data type double precision,
    alter column vlr_venda set data type double precision,
    alter column vlr_frete set data type double precision,
    alter column vlr_devolucao set data type double precision,
    alter column vlr_desconto_icms set data type double precision,
    alter column vlr_margem_contribuicao set data type double precision,
    alter column vlr_margem_devolucao set data type double precision,
    alter column vlr_perc_margem set data type double precision,
    alter column vlr_perc_markup set data type double precision,
    alter column vlr_faturamento set data type double precision,
    alter column qtd_movimento set data type double precision,
    alter column qtd_venda set data type double precision,
    alter column qtd_devolucao set data type double precision;

/** 13/09/2019 - Flavio Alexsandro Silva - Devido a um prlblema nos valores
 *      em diferentes assuntos (faturamento, titulos, etc)
 *      e necessario que a carga tenha capacidade de identificar
 *      e realizar processo de carga diferenciado pra determinados assuntos
 **/
 create table if not exists dim_junk_carga_data_mart
 (
     sk_junk_carga_data_mart serial not null,
     data_mart varchar(255) not null,
     dias_retroacao integer not null,
     carga_inteligente boolean not null,
     carga_completa boolean not null,

     constraint dim_junk_carga_data_mart_pkey primary key (sk_junk_carga_data_mart)
 ) with(oids=false);

 INSERT INTO DIM_JUNK_CARGA_DATA_MART
     (DATA_MART, dias_retroacao, CARGA_INTELIGENTE, CARGA_COMPLETA)
 VALUES
     ('FATURAMENTO', 366, FALSE, FALSE),
     ('ESTOQUE', 800, TRUE, FALSE),
     ('TITULOS', 4000, FALSE, FALSE);

/* 13/11/2019 - Demétrio Santos - Inclusão de uma dimensão de fornecedores de graos que são especificos,
e também readequação da fato_compras_dia*/

CREATE TABLE public.dim_fornecedor_graos (
  sk_fornecedor SERIAL,
  cod_fornecedor BIGINT,
  fornecedor VARCHAR(255),
  CONSTRAINT dim_fornecedor_graos_pkey PRIMARY KEY(sk_fornecedor)
)
WITH (oids = false);

ALTER TABLE public.dim_fornecedor_graos
  OWNER TO vistrabi;

CREATE TABLE public.fato_compras_dia (
  sk_tempo_dia INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  sk_segmento INTEGER NOT NULL,
  sk_fornecedor INTEGER NOT NULL,
  sk_produto INTEGER NOT NULL,
  quantidade_kg DOUBLE PRECISION,
  quantidade_saca DOUBLE PRECISION,
  valor DOUBLE PRECISION,
  valor_nota DOUBLE PRECISION,
  CONSTRAINT fato_compras_dia_idx1 PRIMARY KEY(sk_tempo_dia, sk_empresa, sk_segmento, sk_fornecedor, sk_produto),
  CONSTRAINT fk_empresa FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_fornecedor FOREIGN KEY (sk_fornecedor)
    REFERENCES public.dim_fornecedor_graos(sk_fornecedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_produto FOREIGN KEY (sk_produto)
    REFERENCES public.dim_produto(sk_produto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_segmento FOREIGN KEY (sk_segmento)
    REFERENCES public.dim_segmento(sk_segmento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_tempo_dia FOREIGN KEY (sk_tempo_dia)
    REFERENCES public.dim_tempo_dia(sk_tempo_dia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

COMMENT ON TABLE public.fato_compras_dia
IS 'Fato de compras de grãos apenas.
Departamento 5.
Chamado 9106';

ALTER TABLE public.fato_compras_dia
  OWNER TO vistrabi;

/*  09/12/2019 - Demétrio Santos - Inclusão de tabelas para atender demanda do novo PDL. */

CREATE TABLE public.fato_pontuacao_pdl_filiais (
  sk_tempo_mes INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  codigo_assunto INTEGER NOT NULL,
  valor DOUBLE PRECISION,
  pontuacao INTEGER,
  peso_media_geral INTEGER,
  valor1 DOUBLE PRECISION,
  valor2 DOUBLE PRECISION,
  CONSTRAINT fato_pontuacao_pdl_filiais_idx PRIMARY KEY(sk_tempo_mes, sk_empresa, codigo_assunto),
  CONSTRAINT fk_empresa FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_tempo_mes FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

COMMENT ON COLUMN public.fato_pontuacao_pdl_filiais.valor1
IS 'Valor do dividendo. Exemplo Faturado!';

COMMENT ON COLUMN public.fato_pontuacao_pdl_filiais.valor2
IS 'Valor do Divisor. Exemplo Valor da Meta!';

ALTER TABLE public.fato_pontuacao_pdl_filiais
  OWNER TO vistrabi;

CREATE TABLE public.formulario_mapeamento_assuntos_pdl_filiais (
  codigo SERIAL,
  item VARCHAR(255),
  assunto VARCHAR(255),
  classificacao VARCHAR(100),
  maior_igual_a NUMERIC(30,2),
  menor_que NUMERIC(30,2),
  pontuacao NUMERIC(3,0),
  peso_media_geral NUMERIC(10,2),
  observacao VARCHAR(500),
  CONSTRAINT formulario_mapeamento_assuntos_pdl_filiais_pkey PRIMARY KEY(codigo)
)
WITH (oids = false);

COMMENT ON COLUMN public.formulario_mapeamento_assuntos_pdl_filiais.peso_media_geral
IS 'Este campo é para definir qual é importancia que o assunto tem para compor a média geral de um item.';

ALTER TABLE public.formulario_mapeamento_assuntos_pdl_filiais
  OWNER TO vistrabi;

CREATE TABLE public.stg_qtd_atendimento_ctc_filial (
  cod_filial VARCHAR(20),
  cod_vendedor VARCHAR(20),
  ano SMALLINT,
  mes SMALLINT,
  qtde_atendimentos INTEGER
)
WITH (oids = false);


CREATE TABLE public.stg_tipo_atendimento_filial (
  cod_filial VARCHAR(20),
  cod_vendedor VARCHAR(20),
  ano SMALLINT,
  mes SMALLINT,
  tipo_atendimento VARCHAR(255),
  qtde_atendimento INTEGER
)
WITH (oids = false);


CREATE TABLE public.fato_qtde_atendimento_ctc_filial (
  sk_tempo_mes INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  qtde_atendimentos INTEGER,
  CONSTRAINT fato_qtde_atendimento_ctc_filial_idx PRIMARY KEY(sk_tempo_mes, sk_empresa, sk_vendedor),
  CONSTRAINT fk_empresa FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_tempo_mes FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_vendedor FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

ALTER TABLE public.fato_qtde_atendimento_ctc_filial
  OWNER TO vistrabi;

CREATE TABLE public.fato_clientes_carteira_ctc_pdl (
  sk_tempo_mes INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  sk_cliente_carteira INTEGER NOT NULL,
  CONSTRAINT fato_clientes_atendidos_carteira_pdl_idx PRIMARY KEY(sk_tempo_mes, sk_empresa, sk_vendedor, sk_cliente_carteira),
  CONSTRAINT fk_cliente FOREIGN KEY (sk_cliente_carteira)
    REFERENCES public.dim_cliente(sk_cliente)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_empresa FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_tempo_mes FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_vendedor FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

ALTER TABLE public.fato_clientes_carteira_ctc_pdl
  OWNER TO vistrabi;

CREATE TABLE public.stg_potencial_segmento_safra_pdl (
  nk_tempo_safra VARCHAR(255),
  cod_filial VARCHAR(10),
  cod_vendedor VARCHAR(20),
  segmento VARCHAR(255),
  potencial DOUBLE PRECISION
)
WITH (oids = false);

ALTER TABLE public.stg_potencial_segmento_safra_pdl
  OWNER TO vistrabi;

CREATE TABLE public.fato_historico_notas_pdl_filiais (
  sk_tempo_mes INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  codigo_assunto INTEGER NOT NULL,
  realizado DOUBLE PRECISION,
  pontuacao INTEGER,
  meta DOUBLE PRECISION,
  CONSTRAINT fato_historico_notas_pdl_filiais_idx PRIMARY KEY(sk_tempo_mes, sk_empresa, codigo_assunto),
  CONSTRAINT fk_empresa FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fk_tempo_mes FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
)
WITH (oids = false);

ALTER TABLE public.fato_historico_notas_pdl_filiais
  OWNER TO vistrabi;

drop table if exists formulario_restricao_acesso_regional restrict;
drop table if exists formulario_restricao_acesso_filial restrict;
drop table if exists formulario_restricao_acesso_segmento restrict;
drop table if exists formulario_restricao_acesso_departamento restrict;
create table formulario_restricao_acesso_regional
(
    sk_form_rest_acesso_reg serial not null,
    login_usuario varchar(255),
    arr_cod_regional varchar(255),

    constraint form_rest_acesso_reg_pkey primary key (sk_form_rest_acesso_reg)
)with(oids=false);

create table formulario_restricao_acesso_filial
(
    sk_form_rest_acesso_filial serial not null,
    login_usuario varchar(255),
    arr_sk_empresa varchar(255),

    constraint form_rest_acesso_filial_pkey primary key (sk_form_rest_acesso_filial)
)with(oids=false);

create table formulario_restricao_acesso_segmento
(
    sk_form_rest_acesso_segmento serial not null,
    login_usuario varchar(255),
    arr_sk_segmentos varchar(255),

    constraint form_rest_acesso_segmento_pkey primary key (sk_form_rest_acesso_segmento)
)with(oids=false);

create table formulario_restricao_acesso_departamento
(
    sk_form_rest_acesso_segmento serial not null,
    login_usuario varchar(255),
    arr_cod_departamento varchar(255),

    constraint form_rest_acesso_departamento_pkey primary key (sk_form_rest_acesso_segmento)
)with(oids=false);

alter table if exists formulario_restricao_acesso_filial
	alter column arr_sk_empresa set data type varchar(8096);
alter table if exists formulario_restricao_acesso_segmento
	alter column arr_sk_segmentos set data type varchar(4096);
alter table if exists formulario_restricao_acesso_segmento
	rename column arr_sk_segmentos to arr_sk_segmento;

-- ###### Inicio do DDL de conversão para o SAP ###### --
-- Ajustes de tabelas e formulários, para utilização de SK ao invés de NK
--Formulário F008
ALTER TABLE public.aux_empresas_pdl
  ADD COLUMN sk_empresa INTEGER;

COMMENT ON COLUMN public.aux_empresas_pdl.sk_empresa
IS 'Chave serial da dim_empresa.';

UPDATE public.aux_empresas_pdl AUX
 SET SK_EMPRESA = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = AUX.COD_FILIAL);

ALTER TABLE public.aux_empresas_pdl
  ALTER COLUMN SK_EMPRESA SET NOT NULL;

-- Formulário F109

ALTER TABLE public.aux_filiais_f021
  ADD COLUMN sk_empresa INTEGER;

COMMENT ON COLUMN public.aux_filiais_f021.sk_empresa
IS 'Chave serial da dim_empresa.';

UPDATE public.aux_filiais_f021 AUX
 SET SK_EMPRESA = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = AUX.COD_FILIAL);

ALTER TABLE public.aux_filiais_f021
  ALTER COLUMN SK_EMPRESA SET NOT NULL;

-- Formulário F021

UPDATE public.FORMULARIO_CONTROLE_CTC FO
 SET ID_FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.ID_FILIAL);

UPDATE public.FORMULARIO_CONTROLE_CTC FO
 SET cod_venda = (SELECT DV.SK_VENDEDOR FROM DIM_VENDEDOR DV  WHERE DV.NK_VENDEDOR = CAST(FO.COD_VENDA AS VARCHAR(20)));

-- Formulário F086

UPDATE public.formulario_filial_planejamento_marketing FO
 SET COD_FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.COD_FILIAL);

-- Formulário F107


UPDATE public.formulario_contas_est_orcamento_segmento FO
 SET IDFILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.IDFILIAL);

UPDATE public.formulario_contas_est_orcamento_segmento FO
 SET SEGMENTO = (SELECT DS.SK_SEGMENTO FROM DIM_SEGMENTO DS  WHERE DS.NK_SEGMENTO = FO.SEGMENTO);

-- Formulário F106

UPDATE public.formulario_contas_est_orcamento_cooperado FO
 SET IDFILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.IDFILIAL);

UPDATE public.formulario_contas_est_orcamento_cooperado FO
 SET cooperado = (SELECT DC.SK_CLIENTE FROM DIM_CLIENTE DC WHERE DC.NK_CLIENTE = LEFT(FO.COOPERADO, POSITION('-' IN FO.COOPERADO)-2));

-- Formulário F121

UPDATE public.formulario_relatorio_eventos_filial FO
 SET COD_FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.COD_FILIAL);

-- Formulário F113

UPDATE public.formulario_relatorio_eventos FO
 SET ID_FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.ID_FILIAL);

-- Formulário F124

UPDATE public.formulario_filiais_geofert FO
 SET FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.FILIAL);

-- Formulário F127

UPDATE public.formulario_geofert FO
 SET FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.FILIAL);

UPDATE public.formulario_geofert FO
 SET FILIAL_FATURAMENTO = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.FILIAL_FATURAMENTO);

UPDATE public.formulario_geofert FO
 SET COOPERADO = (SELECT DC.SK_CLIENTE FROM DIM_CLIENTE DC  WHERE DC.NK_CLIENTE = FO.COOPERADO);

--  F139 - Formulário Atividades DTA

UPDATE public.formulario_atividades_dta FO
 SET FILIAL = (SELECT DE.SK_EMPRESA FROM DIM_EMPRESA DE  WHERE DE.COD_FILIAL = FO.FILIAL);

-- F133 - Formulário de Valor de Comodite

ALTER TABLE public.formulario_comodite_cultura
  ADD COLUMN sk_cultura INTEGER;

UPDATE public.formulario_comodite_cultura FO
   set sk_cultura = (SELECT SK_CULTURA FROM DIM_CULTURA DC WHERE DC.NK_CULTURA = FO.NK_CULTURA);

ALTER TABLE public.formulario_comodite_cultura
  ALTER COLUMN sk_cultura SET NOT NULL;

-- F140 - PPV - Formulário Segmento Posição de Vendas

ALTER TABLE public.formulario_controle_segmentos_nps_0101
  ADD COLUMN sk_segmento INTEGER;

UPDATE public.formulario_controle_segmentos_nps_0101 FO
   set sk_segmento = (SELECT sk_segmento FROM DIM_SEGMENTO DS WHERE CAST(DS.COD_SEGMENTO AS INTEGER) = FO.COD_SEGMENTO AND CAST(DS.COD_DEPARTAMENTO AS INTEGER) = FO.COD_DEPARTAMENTO);

ALTER TABLE public.formulario_controle_segmentos_nps_0101
  ALTER COLUMN sk_segmento SET NOT NULL;

-- F116 - Formulário Solicitação de Verba - Eventos

UPDATE FORMULARIO_SOLICITACAO_VERBA_EVENTOS FO
   SET FILIAL = (SELECT ARRAY_TO_STRING(ARRAY_AGG(Y.SK_EMPRESA),';') AS SK_EMPRESA
                   FROM (
                         SELECT CAST(SK_EMPRESA AS VARCHAR(255)) AS SK_EMPRESA, X.FILIAL,
                                X.CODIGO,
                               X.ID
                           FROM (
                                 SELECT ROW_NUMBER() OVER() AS ID,
                                        Z.FILIAL,
                                        Z.CODIGO
                                   FROM (
                                         SELECT (UNNEST(CASE WHEN POSITION(';' IN F.FILIAL) > 0
                                                                THEN STRING_TO_ARRAY(F.FILIAL, ';')
                                                             WHEN LENGTH(F.FILIAL) > 0 AND NOT( POSITION(';' IN F.FILIAL) > 0 )
                                                                THEN ARRAY[F.FILIAL]
                                                        END)) AS FILIAL,
                                                F.CODIGO
                                           FROM FORMULARIO_SOLICITACAO_VERBA_EVENTOS F
                                        ) Z
                                ) X
                     INNER JOIN DIM_EMPRESA DE ON DE.COD_FILIAL  = CAST(X.FILIAL AS INTEGER)
                       ORDER BY X.ID
                        )Y
               GROUP BY Y.CODIGO
                 HAVING ARRAY_TO_STRING(ARRAY_AGG(Y.FILIAL),';') = FO.FILIAL
                    AND Y.CODIGO                                 = FO.CODIGO
                );

-- F117 - Formulário Solicitação de Verba - Patrocínios e Doações

UPDATE FORMULARIO_SOLICITACAO_VERBA_PATROCINIO FO
   SET FILIAL = (SELECT ARRAY_TO_STRING(ARRAY_AGG(Y.SK_EMPRESA),';') AS SK_EMPRESA
                   FROM (
                         SELECT CAST(SK_EMPRESA AS VARCHAR(255)) AS SK_EMPRESA, X.FILIAL,
                                X.CODIGO,
                               X.ID
                           FROM (
                                 SELECT ROW_NUMBER() OVER() AS ID,
                                        Z.FILIAL,
                                        Z.CODIGO
                                   FROM (
                                         SELECT (UNNEST(CASE WHEN POSITION(';' IN F.FILIAL) > 0
                                                                THEN STRING_TO_ARRAY(F.FILIAL, ';')
                                                             WHEN LENGTH(F.FILIAL) > 0 AND NOT( POSITION(';' IN F.FILIAL) > 0 )
                                                                THEN ARRAY[F.FILIAL]
                                                        END)) AS FILIAL,
                                                F.CODIGO
                                           FROM FORMULARIO_SOLICITACAO_VERBA_PATROCINIO F
                                        ) Z
                                ) X
                     INNER JOIN DIM_EMPRESA DE ON DE.COD_FILIAL  = CAST(X.FILIAL AS INTEGER)
                       ORDER BY X.ID
                        )Y
               GROUP BY Y.CODIGO
                 HAVING ARRAY_TO_STRING(ARRAY_AGG(Y.FILIAL),';') = FO.FILIAL
                    AND Y.CODIGO                                 = FO.CODIGO
                );

-- F118 - Formulário Solicitação de Verba - Mídia

UPDATE FORMULARIO_SOLICITACAO_VERBA_MIDIA FO
   SET FILIAL = (SELECT ARRAY_TO_STRING(ARRAY_AGG(Y.SK_EMPRESA),';') AS SK_EMPRESA
                   FROM (
                         SELECT CAST(SK_EMPRESA AS VARCHAR(255)) AS SK_EMPRESA, X.FILIAL,
                                X.CODIGO,
                               X.ID
                           FROM (
                                 SELECT ROW_NUMBER() OVER() AS ID,
                                        Z.FILIAL,
                                        Z.CODIGO
                                   FROM (
                                         SELECT (UNNEST(CASE WHEN POSITION(';' IN F.FILIAL) > 0
                                                                THEN STRING_TO_ARRAY(F.FILIAL, ';')
                                                             WHEN LENGTH(F.FILIAL) > 0 AND NOT( POSITION(';' IN F.FILIAL) > 0 )
                                                                THEN ARRAY[F.FILIAL]
                                                        END)) AS FILIAL,
                                                F.CODIGO
                                           FROM FORMULARIO_SOLICITACAO_VERBA_MIDIA F
                                        ) Z
                                ) X
                     INNER JOIN DIM_EMPRESA DE ON DE.COD_FILIAL  = CAST(X.FILIAL AS INTEGER)
                       ORDER BY X.ID
                        )Y
               GROUP BY Y.CODIGO
                 HAVING ARRAY_TO_STRING(ARRAY_AGG(Y.FILIAL),';') = FO.FILIAL
                    AND Y.CODIGO                                 = FO.CODIGO
                );

-- F129 - Formulário Meta Faturamento DCC

ALTER TABLE public.formulario_meta_faturamento_vendedor_dcc
  ALTER COLUMN filial TYPE INTEGER;

ALTER TABLE public.formulario_meta_faturamento_vendedor_dcc
  ALTER COLUMN vendedor TYPE VARCHAR(255) COLLATE pg_catalog."default";

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET FILIAL = (SELECT SK_EMPRESA FROM DIM_EMPRESA DE WHERE DE.COD_FILIAL = F.FILIAL);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET VENDEDOR = (SELECT CAST(SK_VENDEDOR AS VARCHAR) FROM DIM_VENDEDOR DV WHERE DV.NK_VENDEDOR = F.VENDEDOR);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_1 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_1);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_2 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_2);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_3 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_3);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_4 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_4);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_5 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_5);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_6 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_6);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_7 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_7);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_8 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_8);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_9 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_9);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_10 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_10);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_11 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_11);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_12 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_12);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_13 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_13);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DCC F
  SET SEGMENTO_14 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_14);

-- F131 - Formulário Meta Faturamento DMA

ALTER TABLE public.formulario_meta_faturamento_vendedor_dma
  ALTER COLUMN filial TYPE INTEGER;

ALTER TABLE public.formulario_meta_faturamento_vendedor_dma
  ALTER COLUMN vendedor TYPE VARCHAR(255) COLLATE pg_catalog."default";

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET FILIAL = (SELECT SK_EMPRESA FROM DIM_EMPRESA DE WHERE DE.COD_FILIAL = F.FILIAL);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET VENDEDOR = (SELECT CAST(SK_VENDEDOR AS VARCHAR) FROM DIM_VENDEDOR DV WHERE DV.NK_VENDEDOR = F.VENDEDOR);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_1 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_1);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_2 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_2);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_3 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_3);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_4 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_4);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_5 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_5);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_6 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_6);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_7 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_7);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_8 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_8);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_9 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_9);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_10 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_10);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_11 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_11);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_12 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_12);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_13 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_13);

UPDATE FORMULARIO_META_FATURAMENTO_VENDEDOR_DMA F
  SET SEGMENTO_14 = (SELECT CAST(SK_SEGMENTO AS VARCHAR) FROM DIM_SEGMENTO DS WHERE DS.NK_SEGMENTO = F.SEGMENTO_14);

-- ###### DDL de objetos e processos exclusivos da estrutura de migração para o SAP  ###### --

/** 20/09/2019 - Flavio Alexsandro Silva - Implementacao de uma dimensao
 *		de parametrizacao, para configuracao e ajustes finos no processo
 *		de integracao com o SAP, SINCO e eventualmente em outros sistemas
 *		Essa dimensao é lida e/ou atualizada por ETL e se torna variaveis
 *		de ambiente no Kettle/PDI dinamicamente.
 *		** NAO CONFUNDIR COM A DIM_JUNK_PARAMETROS DO CLOVER ANALYTICS **
 **/

DROP TABLE IF EXISTS DIM_JUNK_PARAMETRO RESTRICT;

CREATE TABLE IF NOT EXISTS DIM_JUNK_PARAMETRO
(
    SK_JUNK_PARAMETRO SERIAL NOT NULL,
    PARAMETRO VARCHAR(255) NOT NULL,
    VALOR VARCHAR(100) DEFAULT '',
    DESCRICAO VARCHAR(255),
    OBSERVACAO TEXT,

    CONSTRAINT DIM_JUNK_PARAMETRO_PKEY PRIMARY KEY (SK_JUNK_PARAMETRO)
) WITH (OIDS=FALSE);

/**
 * Tabelas de backup das dimensoes, caso algo
 *  de muito errado ocorra, como por exemplo,
 *  mapearem um cliente do sinco, no cliente
 *  errado do SAP e depois alterarem
 **/
drop table if exists dim_cliente_backup restrict;
create table if not exists dim_cliente_backup
as
	select *
	from dim_cliente;

drop table if exists dim_produto_backup restrict;
create table if not exists dim_produto_backup
as
	select *
	from dim_produto;

drop table if exists dim_segmento_backup restrict;
create table if not exists dim_segmento_backup
as
	select *
	from dim_segmento;

drop table if exists dim_fornecedor_backup restrict;
create table if not exists dim_fornecedor_backup
as
	select *
	from dim_fornecedor;

drop table if exists dim_empresa_backup restrict;
create table if not exists dim_empresa_backup
as
	select *
	from dim_empresa;

drop table if exists dim_vendedor_backup restrict;
create table if not exists dim_vendedor_backup
as
	select *
	from dim_vendedor;

drop table if exists dim_cultura_backup restrict;
create table if not exists dim_cultura_backup
as
    select *
    from dim_cultura;

drop table if exists formulario_mapeamento_filial_fornecedor_mgr restrict;

create table if not exists formulario_mapeamento_filial_fornecedor_mgr
(
    codigo serial not null,
    sk_empresa integer not null,
    sk_fornecedor integer not null,
    filial varchar(255) not null,
    area_negocio varchar(255) not null,

    constraint form_map_filial_fornecedor_mgr_pkey primary key (codigo)
)with(oids=false);

insert into formulario_mapeamento_filial_fornecedor_mgr
    (sk_empresa, sk_fornecedor, filial, area_negocio)
select
    de.sk_empresa,
    df.sk_fornecedor,
    fm.filial,
    fm.area_negocio
from
    formulario_mapeamento_filial_fornecedor fm
    inner join dim_empresa de on de.cod_filial = fm.cod_filial
    inner join dim_fornecedor df on df.nk_fornecedor = fm.nk_fornecedor;

-- ## Beware of Satsui no Hado ## --
drop table if exists dim_junk_empresa_controle restrict;
create table dim_junk_empresa_controle
(
	sk_empresa integer not null,
	data jsonb not null,

	constraint sk_junk_empresa_controle_pkey primary key (sk_empresa),
    constraint sk_junk_empresa_controle_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa)
) with(oids=false);

drop index if exists dim_junk_empresa_controle_idx restrict;
create index dim_junk_empresa_controle_idx
	on dim_junk_empresa_controle
	using gin(data jsonb_path_ops);

drop table if exists stg_empresa_sap restrict;
create table if not exists stg_empresa_sap
(
    nk_empresa varchar(100),
    regional varchar(255),
    filial varchar(255),
    sigla_filial varchar(100),
    dd_shopping_rural varchar(2),
    cod_chave_erp_sap varchar(100),
    cod_chave_erp_sinco varchar(100),
    cod_regional varchar(25),
    cod_ibge varchar(25)
) with(oids=false);

alter table if exists dim_empresa
	alter column cod_filial set data type varchar (25);

insert into dim_junk_empresa_controle
  (sk_empresa, data)
select
  sk_empresa,
  jsonb_build_object(
    'situacao', 'atualizar',
    'origem', 'SINCO',
    'cod_chave_erp_sinco', de.cod_filial,
    'cod_chave_erp_sap', ''
  ) as data
from dim_empresa de;

/***
  * DDL de alteração/ajuste SAP para a dimensão de produto.
  **/

with
    form as
    (
        select
            sk_segmento,
            upper('sic#') || nk_segmento as nk_segmento
        from formulario_segmento_posicao_venda
        where
            substring(nk_segmento from 1 for 3) not in
                (upper('sic'), upper('sap'))
    )
update formulario_segmento_posicao_venda f
set nk_segmento = fm.nk_segmento
from form fm
where fm.sk_segmento = f.sk_segmento;

with
    produto as
    (
        select
            sk_produto,
            upper('sic#') || nk_segmento  as nk_segmento,
            upper('sic#') || nk_fornecedor as nk_fornecedor
        from dim_produto dp
        where
            substring(nk_segmento from 1 for 3) not in
                (upper('sic'), upper('sap'))
    )
update dim_produto dp
set
    nk_segmento = p.nk_segmento,
    nk_fornecedor = p.nk_fornecedor
from produto p
where p.sk_produto = dp.sk_produto;

with
    segmento as
    (
        select
            sk_segmento,
            upper('sic#') || nk_segmento as nk_segmento
        from dim_segmento ds
        where
            substring(nk_segmento from 1 for 3) not in
                (upper('sic'), upper('sap'))
			and nk_segmento <> '0#0'
    )
update dim_segmento ds
set nk_segmento = s.nk_segmento
from segmento s
where s.sk_segmento = ds.sk_segmento;

with
    fornecedor as
    (
        select
            sk_fornecedor,
            upper('sic#') || nk_fornecedor as nk_fornecedor,
            upper('sic#') || nk_segmento as nk_segmento
        from dim_fornecedor df
        where
            substring(nk_fornecedor from 1 for 3) not in
                (upper('sic'), upper('sap'))
			and nk_fornecedor <> '0#0#0'
    )
update dim_fornecedor df
set
    nk_fornecedor = f.nk_fornecedor,
    nk_segmento = f.nk_segmento
from fornecedor f
where f.sk_fornecedor = df.sk_fornecedor;

alter table if exists dim_produto
    alter column cod_produto set data type varchar(25),
	alter column cod_modelo set data type varchar(10),
	alter column cod_segmento set data type varchar(20),
	alter column cod_fornecedor set data type varchar(30),
	alter column nk_fornecedor set data type varchar(30);

alter table if exists dim_fornecedor
	alter column cod_fornecedor set data type varchar(30);

drop table if exists dim_junk_hist_seg_for restrict;
create table if not exists dim_junk_hist_seg_for
(
    sk_junk_hist_seg_for serial not null,
    cod_departamento varchar(10) not null,
    cod_segmento varchar(10) not null,
    cod_fornecedor varchar(25) not null,
    cod_modelo varchar(10) not null,
    departamento varchar(255) not null,
    segmento varchar(255) not null,
    fornecedor varchar(255) not null,
    modelo varchar(255) not null,

    constraint dim_junk_hist_seg_for_pkey primary key (sk_junk_hist_seg_for)
)with(oids=false);

drop table if exists dim_junk_hist_prod_seg restrict;
create table if not exists dim_junk_hist_prod_seg
(
    sk_produto integer not null,
    sk_junk_hist_seg_for integer not null,

    constraint dim_junk_hist_prod_seg_pkey primary key (sk_produto, sk_junk_hist_seg_for)
)with(oids=false);

insert into dim_junk_hist_seg_for
    (cod_departamento, cod_segmento, cod_fornecedor, cod_modelo,
    departamento, segmento, fornecedor, modelo)
select distinct
    cod_departamento,
    cod_segmento,
    substring(cod_fornecedor from '(.*)#.*#.*') as cod_fornecedor,
    cod_modelo,
    departamento,
    segmento,
    (
        case
            when fornecedor like '% [% - %]'
            then substring(fornecedor from '(.*) \[.* - .*\]')
            else fornecedor
        end
    ) as fornecedor,
    modelo
from dim_produto
order by
    departamento,
    segmento,
    fornecedor;

insert into dim_junk_hist_prod_seg
    (sk_produto, sk_junk_hist_seg_for)
select
    dp.sk_produto,
    djhsf.sk_junk_hist_seg_for
from
    dim_produto dp
    inner join dim_junk_hist_seg_for djhsf on
        djhsf.cod_segmento = dp.cod_segmento
        and djhsf.cod_departamento = dp.cod_departamento
        and djhsf.cod_fornecedor = substring(dp.cod_fornecedor from '(.*)#.*#.*')
        and djhsf.cod_modelo = cast(dp.cod_modelo as varchar);

drop index if exists stg_produto_codproduto_idx restrict;
create index stg_produto_codproduto_idx
    on stg_produto
    using btree(codproduto asc);

drop table if exists stg_produto_sap restrict;
create table stg_produto_sap
(
  nk_produto varchar(255),
  nk_fornecedor varchar(30) null,
  nk_segmento varchar(30) null,
  cod_chave_erp_sap varchar(20),
  cod_chave_erp_sinco varchar(10),
  cod_segmento varchar(10),
  cod_departamento varchar(10),
  cod_fornecedor varchar(255),
  cod_familia varchar(255),
  cod_modelo varchar(10),
  produto varchar(255),
  segmento varchar(255),
  fornecedor varchar(255),
  familia varchar(255),
  modelo varchar(255),
  departamento varchar(255),
  similaridade varchar(255),
  dd_servico int2 null,
  dd_shopping_rural int2 null,
  dd_flag_manutencao varchar(1) null
) with(oids=false);

drop index if exists stg_produto_sap_chave_erp_sap_idx restrict;
create index stg_produto_sap_chave_erp_sap_idx
    on stg_produto_sap
    using btree(cod_chave_erp_sap asc);

-- ## Beware of Satsui no Hado ## --
drop table if exists dim_junk_controle_produto restrict;
create table dim_junk_controle_produto
(
  sk_produto integer not null,
  data jsonb not null,

  constraint dim_junk_controle_produto_pkey primary key (sk_produto),
  constraint dim_junk_controle_produto_produto_fkey foreign key (sk_produto) references dim_produto(sk_produto)
) with(oids=false);

truncate dim_junk_controle_produto restrict;

drop index if exists dim_junk_controle_produto_idx restrict;
create index dim_junk_controle_produto_idx
    on dim_junk_controle_produto
    using gin(data jsonb_path_ops);

with
    produto as
    (
        select
            dp.sk_produto,
            dp.cod_produto,
            dp.cod_departamento,
            dp.cod_segmento,
            substring(dp.cod_fornecedor from '(.*)#.*#.*') as cod_fornecedor,
            dp.cod_modelo,
            dp.departamento,
            dp.segmento,
            (
                case
                    when dp.fornecedor like '% [% - %]'
                    then substring(dp.fornecedor from '(.*) \[.* - .*\]')
                    else dp.fornecedor
                end
            ) as fornecedor,
            dp.modelo,
            dp.nk_segmento,
            dp.nk_fornecedor,
            ds.sk_segmento,
            df.sk_fornecedor
        from
            dim_produto dp
            left outer join dim_segmento ds on ds.nk_segmento = dp.nk_segmento
            left outer join dim_fornecedor df on df.nk_fornecedor = dp.nk_fornecedor
    )
insert into dim_junk_controle_produto
  (sk_produto, data)
select
    p.sk_produto,
    jsonb_build_object(
        'situacao', 'atualizar',
        'origem', 'SINCO',
        'cod_chave_erp_sinco', p.cod_produto,
        'cod_chave_erp_sap', '',
        'dados_sinco', jsonb_build_object(
            'cod_chave_departamento', coalesce(cast(p.cod_departamento as varchar), ''),
            'cod_chave_segmento', coalesce(cast(p.cod_segmento as varchar), ''),
            'cod_chave_fornecedor', coalesce(cast(p.cod_fornecedor as varchar), ''),
            'cod_chave_modelo', coalesce(cast(p.cod_modelo as varchar), ''),
            'desc_departamento', coalesce(p.departamento, ''),
            'desc_segmento', coalesce(p.segmento, ''),
            'desc_fornecedor', coalesce(p.fornecedor, ''),
            'desc_modelo', coalesce(p.modelo, ''),
            'cod_dw_nk_segmento', coalesce(p.nk_segmento, ''),
            'cod_dw_nk_fornecedor', coalesce(p.nk_fornecedor, ''),
            'cod_dw_sk_segmento', p.sk_segmento,
            'cod_dw_sk_fornecedor', p.sk_fornecedor
        )
    ) as data
from produto p;

/***
  * DDL de alteração/ajuste SAP para a dimensão de cliente/cooperado.
  **/
alter table if exists dim_cliente
	alter column idfilial set data type varchar(25);

drop table if exists stg_cliente_sap restrict;
drop table if exists stg_cliente_map_sinco, stg_cliente_remap_sap restrict;

create table if not exists stg_cliente_sap
(
    nk_cliente varchar(255),
    nk_tempo_dia_venc_cad date,
    nk_tempo_dia_ult_compra date,
    cod_chave_erp_sap varchar(10),
    cod_chave_erp_sinco varchar(20),
    cod_chave_erp_sap_filial varchar(20),
    cod_chave_matricula_sap varchar(10),
    dd_perfil_produtor smallint,
    dd_crm smallint,
    dd_usina smallint,
    dd_flag_manutencao varchar(1),
    dd_flag_ativo smallint,
    cliente varchar(255),
    uf varchar(20),
    municipio varchar(255),
    vlr_limite_credito numeric(18,4) default 0 not null
) with(oids=false);

create table if not exists stg_cliente_remap_sap
(
    cod_chave_erp_sap_subst varchar(10),
    cod_chave_erp_sap_origin varchar(10)
) with(oids=false);

comment on table stg_cliente_sap is 'Para a Coopercitrus, cliente eh o Cooperado, que pode ser cliente, funcionario (ctc), fornecedor, etc...';

-- ## Beware of Satsui no Hado ## --
drop table if exists dim_junk_controle_cliente restrict;
create table dim_junk_controle_cliente
(
  sk_cliente integer not null,
  data jsonb not null,

  constraint dim_junk_controle_cliente_pkey primary key (sk_cliente),
  constraint dim_junk_controle_cliente_cliente_fkey foreign key (sk_cliente) references dim_cliente(sk_cliente)
) with(oids=false);

drop index if exists dim_junk_controle_cliente_idx restrict;
create index dim_junk_controle_cliente_idx
  on dim_junk_controle_cliente
  using gin(data jsonb_path_ops);

insert into dim_junk_controle_cliente
  (sk_cliente, data)
select
  sk_cliente,
  jsonb_build_object(
    'situacao', 'atualizar',
    'origem', 'SINCO',
    'cod_chave_erp_sinco', dc.cod_cliente,
    'cod_chave_erp_sap', '',
    'cod_chave_matricula_sap', '',
    'cod_chave_erp_sap_remap', to_jsonb(cast(null as varchar))
  ) as data
from dim_cliente dc;

/***
  * DDL de alteração/ajuste SAP para a dimensão de vendedor
  **/

alter table if exists dim_vendedor
	alter column nk_vendedor set data type varchar(10),
    alter column cod_funcao set data type varchar(8),
	drop column if exists dd_flag_cons_tec_com restrict,
	add column if not exists dd_flag_cons_tec_com smallint;
alter table if exists dim_vendedor
	alter column dd_flag_cons_tec_com set data type smallint
		using (
			case
				when cod_funcao = '36'
				then 1
				else 0
			end
		),
	alter column dd_flag_cons_tec_com set default 0,
	alter column dd_flag_cons_tec_com set not null;

-- TODO Aqui seria interesssante revisar essa tabela auxiliar
truncate table aux_vendedores_ativos restrict;
alter table if exists aux_vendedores_ativos
    alter column flgativo set data type smallint,
    alter column codfilial set data type varchar(25),
    alter column idvendedor set data type varchar(10);

-- TODO Aqui seria interesssante revisar essa tabela auxiliar
alter table if exists aux_vigencia_vendedor
    alter column cod_vendedor set data type varchar(10),
    alter column cod_filial set data type varchar(25);

drop table if exists stg_vendedor_sap restrict;
create table stg_vendedor_sap
(
    nk_vendedor varchar(255),
    nk_tempo_dia_deslig date,
    nk_tempo_dia_inicio date,
	cod_chave_erp_sinco varchar(10),
    cod_chave_erp_sap_filial varchar(10),
    cod_funcao varchar(8),
    dd_dcc_dma varchar(3),
    dd_flag_ativo smallint,
    dd_flag_unico smallint,
	dd_flag_cons_tec_com smallint,
    vendedor varchar(255),
    desc_dcc_dma varchar(255)
)with(oids=false);

drop table if exists stg_vendedor_sinco restrict;
create table stg_vendedor_sinco
(
    nk_vendedor varchar(255),
    nk_tempo_dia_deslig date,
    nk_tempo_dia_inicio date,
    cod_chave_erp_sinco_filial varchar(10),
    cod_funcao varchar(8),
    dd_dcc_dma varchar(3),
    dd_flag_ativo smallint,
    dd_flag_unico smallint,
    vendedor varchar(255),
    desc_dcc_dma varchar(255)
)with(oids=false);

drop table if exists stg_vendedor_crm restrict;
create table stg_vendedor_crm
(
    cod_vendedor varchar(10),
    departamento varchar(255),
    vendedor varchar(255),
    cod_chave_erp_filial varchar(10),
    perfil_acesso varchar(255),
    nk_tempo_dia_ini_vigenc date,
    nk_tempo_dia_fim_vigenc date
)with(oids=false);

-- ## Beware of Satsui no Hado ## --
drop table if exists dim_junk_controle_vendedor restrict;
create table dim_junk_controle_vendedor
(
  sk_vendedor integer not null,
  data jsonb not null,

  constraint dim_junk_controle_vendedor_pkey primary key (sk_vendedor),
  constraint dim_junk_controle_vendedor_cliente_fkey foreign key (sk_vendedor) references dim_vendedor(sk_vendedor)
) with(oids=false);

drop index if exists dim_junk_controle_vendedor_idx restrict;
create index dim_junk_controle_vendedor_idx
  on dim_junk_controle_vendedor
  using gin(data jsonb_path_ops);

insert into dim_junk_controle_vendedor
  (sk_vendedor, data)
select
  dv.sk_vendedor,
  jsonb_build_object(
    'situacao', 'atualizar',
    'origem', 'SINCO',
    'cod_chave_erp_sinco', dv.nk_vendedor,
    'cod_chave_erp_sap', ''
  ) as data
from dim_vendedor dv;

/***
 * DDL de alteração/ajuste SAP para a dimensão de cultura
**/
alter table dim_cultura
    alter column nk_cultura set data type varchar(10),
    drop column if exists cod_cultura restrict,
    add column cod_cultura varchar(10);
alter table dim_cultura
    alter column cod_cultura set data type varchar(10)
        using nk_cultura,
    alter column cod_cultura set not null;

drop table if exists stg_cultura_sinco restrict;
create table if not exists stg_cultura_sinco
(
    nk_cultura varchar(10),
	cod_cultura varchar(10),
    cultura varchar(255),
    cod_grupo_cultura integer
)with (oids=false);

drop table if exists stg_cultura_sap restrict;
create table if not exists stg_cultura_sap
(
    nk_cultura varchar(10),
	cod_cultura varchar(10),
    cod_grupo_cultura integer,
    cultura varchar(255),
    cod_chave_erp_sinco varchar(10)
)with (oids=false);

-- ## Beware of Satsui no Hado ## --
drop table if exists dim_junk_controle_cultura restrict;
create table dim_junk_controle_cultura
(
  sk_cultura integer not null,
  data jsonb not null,

  constraint dim_junk_controle_cultura_pkey primary key (sk_cultura),
  constraint dim_junk_controle_cultura_fkey foreign key (sk_cultura) references dim_cultura(sk_cultura)
) with(oids=false);

drop index if exists dim_junk_controle_cultura_idx restrict;
create index dim_junk_controle_cultura_idx
  on dim_junk_controle_cultura
  using gin(data jsonb_path_ops);

update dim_cultura
set nk_cultura = 'SIC#' || nk_cultura
where cod_cultura <> '0';

insert into dim_junk_controle_cultura
  (sk_cultura, data)
select
  dct.sk_cultura,
  jsonb_build_object(
    'situacao', 'atualizar',
    'origem', 'SINCO',
    'nk_cultura', dct.nk_cultura,
    'cod_chave_erp_sinco', dct.cod_cultura,
    'cod_chave_erp_sinco_grupo', coalesce(dct.grupo_cultura, ''),
    'cod_chave_erp_sap', ''
  ) as data
from dim_cultura dct;

/***
 * DDL de alteração/ajuste SAP para a fato de faturamento
**/
create table if not exists dim_junk_map_servicos_onclik
(
	cod_chave_erp_sinco varchar(10) not null,
	cod_onclik varchar(10)
)with(oids=false);

insert into dim_junk_map_servicos_onclik
	(cod_chave_erp_sinco, cod_onclik)
select
	cod_sinco as cod_chave_erp_sinco,
	cast(cod_onclick as varchar(10)) as cod_onclik
from stg_servicos_onclick;

create index dim_junk_map_servicos_onclik_idx
	on dim_junk_map_servicos_onclik
	using btree(cod_onclik);

alter table if exists stg_servicos_onclick
	rename to "stg_servicos_onclick.drop_after_20200701";

drop table if exists pre_stg_mov_fat_onclik restrict;
drop table if exists pre_stg_mov_fat_sinco restrict;
drop table if exists pre_stg_mov_fat_sap restrict;
drop table if exists stg_mov_fat_dia restrict;

create table if not exists pre_stg_mov_fat_onclik
(
    nk_tempo_dia_mov date,
    nk_tempo_dia_venc date,
    nk_tempo_dia_emissao date,
    nk_empresa varchar(10),
    nk_produto varchar(20),
    nk_cliente varchar(10),
    nk_vendedor varchar(10),
    nk_cultura varchar(10),
    nk_municipio_faturamento varchar(30),

    dd_nota_fiscal bigint,
    dd_serie_nota_fiscal varchar(10),

    vlr_nota double precision,
    vlr_venda double precision,
    vlr_frete double precision,
    vlr_devolucao double precision,
    vlr_desconto_icms double precision,
    vlr_margem_contribuicao double precision,
    vlr_margem_devolucao double precision,
    vlr_perc_margem double precision,
    vlr_perc_markup double precision,
    vlr_faturamento double precision,

    qtd_movimento double precision,
    qtd_venda double precision,
    qtd_devolucao double precision
)with(oids=false);

create table if not exists pre_stg_mov_fat_sinco
(
    nk_tempo_dia_mov date,
    nk_tempo_dia_venc date,
    nk_tempo_dia_emissao date,
    nk_empresa varchar(10),
    nk_produto varchar(20),
    nk_cliente varchar(10),
    nk_vendedor varchar(10),
    nk_cultura varchar(10),
    nk_municipio_faturamento varchar(30),

    dd_nota_fiscal bigint,
    dd_serie_nota_fiscal varchar(10),

    vlr_nota double precision,
    vlr_venda double precision,
    vlr_frete double precision,
    vlr_devolucao double precision,
    vlr_desconto_icms double precision,
    vlr_margem_contribuicao double precision,
    vlr_margem_devolucao double precision,
    vlr_perc_margem double precision,
    vlr_perc_markup double precision,
    vlr_faturamento double precision,

    qtd_movimento double precision,
    qtd_venda double precision,
    qtd_devolucao double precision
)with(oids=false);

create table if not exists pre_stg_mov_fat_sap
(
    nk_tempo_dia_mov date,
    nk_tempo_dia_venc date,
    nk_tempo_dia_emissao date,
    nk_empresa varchar(10),
    nk_produto varchar(20),
    nk_cliente varchar(10),
    nk_vendedor varchar(10),
    nk_cultura varchar(10),
    nk_municipio_faturamento varchar(30),

    dd_nota_fiscal bigint,
    dd_serie_nota_fiscal varchar(10),

    vlr_nota double precision,
    vlr_venda double precision,
    vlr_frete double precision,
    vlr_devolucao double precision,
    vlr_desconto_icms double precision,
    vlr_margem_contribuicao double precision,
    vlr_margem_devolucao double precision,
    vlr_perc_margem double precision,
    vlr_perc_markup double precision,
    vlr_faturamento double precision,

    qtd_movimento double precision,
    qtd_venda double precision,
    qtd_devolucao double precision
)with(oids=false);

create table if not exists stg_mov_fat_dia
(
    nk_empresa varchar(10),
    nk_tempo_dia_mov date,
    nk_produto varchar(20),
    nk_cliente varchar(10),
    nk_vendedor varchar(10),
    nk_cultura varchar(10),
    nk_segmento varchar(20),
    nk_fornecedor varchar(30),
    nk_tempo_dia_venc date,
    nk_tempo_dia_emissao date,
    nk_municipio_faturamento varchar(30),

    dd_nota_fiscal integer,
    dd_serie_nota_fiscal varchar(10),
	dd_servico smallint,

    vlr_faturamento double precision,
    vlr_frete double precision,
    vlr_margem_contribuicao double precision,
    qtd_movimento double precision
)with(oids=false);

/***
 * DDL de alteração/ajuste SAP para a fato de estoque
**/
drop table if exists stg_controle_carga_estoque restrict;

create table if not exists stg_controle_carga_estoque
(
    nk_tempo_dia date not null,
    vlr_estoque_fisico double precision not null default 0
)with(oids=false);

drop table if exists stg_posicao_estoque_sinco restrict;
drop table if exists stg_posicao_estoque_sap restrict;
drop table if exists stg_posicao_estoque restrict;

create table stg_posicao_estoque_sinco
(
    nk_tempo_dia date,
    nk_empresa varchar(12),
    nk_produto varchar(20),
    vlr_custo_medio numeric(16,6),
    vlr_preco numeric(14,2),
    qtd_estoque numeric(14,2),
    qtd_saida numeric(14,2),
    qtd_entrada numeric(14,2),
    qtd_entrega_futura numeric(14,2),
    qtd_pedido_venda numeric(14,2),
    qtd_reserva numeric(14,2),
    qtd_estoque_disponivel numeric(14,2),
    qtd_estoque_irregular numeric(14,2),
    qtd_transito numeric(14,2),
    qtd_pedido_compra_aberto numeric(14,2)
)with(oids=false);

create table stg_posicao_estoque_sap
(
    nk_tempo_dia date,
    nk_empresa varchar(12),
    nk_produto varchar(20),
    vlr_custo_medio numeric(16,6),
    vlr_preco numeric(14,2),
    qtd_estoque numeric(14,2),
    qtd_saida numeric(14,2),
    qtd_entrada numeric(14,2),
    qtd_entrega_futura numeric(14,2),
    qtd_pedido_venda numeric(14,2),
    qtd_reserva numeric(14,2),
    qtd_estoque_disponivel numeric(14,2),
    qtd_estoque_irregular numeric(14,2),
    qtd_transito numeric(14,2),
    qtd_pedido_compra_aberto numeric(14,2)
)with(oids=false);

create table stg_posicao_estoque
(
    nk_tempo_dia date,
    nk_empresa varchar(12),
    nk_produto varchar(20),
    vlr_custo_medio numeric(16,6),
    vlr_preco numeric(14,2),
    qtd_estoque numeric(14,2),
    qtd_saida numeric(14,2),
    qtd_entrada numeric(14,2),
    qtd_entrega_futura numeric(14,2),
    qtd_pedido_venda numeric(14,2),
    qtd_reserva numeric(14,2),
    qtd_estoque_disponivel numeric(14,2),
    qtd_estoque_irregular numeric(14,2),
    qtd_transito numeric(14,2),
    qtd_pedido_compra_aberto numeric(14,2)
)with(oids=false);

/***
 * DDL de alteração/ajuste SAP para a fato de entrega futura
**/
drop table if exists pre_stg_resumo_entrega_futura_sinco restrict;
drop table if exists pre_stg_resumo_entrega_futura_sap restrict;
drop table if exists stg_resumo_entrega_futura restrict;

create table pre_stg_resumo_entrega_futura_sinco
(
    nk_empresa varchar(10),
    nk_segmento varchar(25),
    nk_produto varchar(20),
    nk_vendedor varchar(20),
    nk_cliente varchar(12),
    nk_tempo_dia_saldo date,
    nk_tempo_dia_mov date,

    dd_num_nota_fiscal varchar(10),

    qtd_venda numeric(16,4),
    qtd_saldo_vef numeric(16,4),
    vlr_preco_unit numeric(18,6),
    vlr_saldo numeric(18,6)
)with(oids=false);

create table pre_stg_resumo_entrega_futura_sap
(
    nk_empresa varchar(10),
    nk_segmento varchar(25),
    nk_produto varchar(20),
    nk_vendedor varchar(20),
    nk_cliente varchar(12),
    nk_tempo_dia_saldo date,
    nk_tempo_dia_mov date,

    dd_num_nota_fiscal varchar(10),

    qtd_venda numeric(16,4),
    qtd_saldo_vef numeric(16,4),
    vlr_preco_unit numeric(18,6),
    vlr_saldo numeric(18,6)
)with(oids=false);

create table stg_resumo_entrega_futura
(
    nk_empresa varchar(10),
    nk_segmento varchar(25),
    nk_produto varchar(20),
    nk_vendedor varchar(20),
    nk_cliente varchar(12),
    nk_tempo_dia_saldo date,
    nk_tempo_dia_mov date,

    dd_num_nota_fiscal varchar(10),

    qtd_venda numeric(16,4),
    qtd_saldo_vef numeric(16,4),
    vlr_preco_unit numeric(18,6),
    vlr_saldo numeric(18,6)
)with(oids=false);

/***
 * DDL de ajuste para planilha de kilometragem dos consultores (CTCs)
**/

drop table if exists stg_kilometragem_ctc restrict;
create table if not exists stg_kilometragem_ctc
(
    cod_filial varchar(20),
    nk_vendedor varchar(20),
    filial varchar(255),
    km_atual numeric(14,4),
    ano smallint,
    mes smallint,
    sistema varchar(255),

    constraint stg_kilometragem_ctc_sistema_cst check (lower(sistema) in (lower('sinco'), lower('sap')))
)with(oids=false);

/** Ajuste para rebate **/

alter table if exists dim_empresa_rebate
    drop column if exists nk_fornecedor_sap;
alter table if exists dim_empresa_rebate
    add column nk_fornecedor_sap varchar(30) default null;

/***
 * DDL de ajuste/integração com o CRM Analitico, devido a mudancas das chaves
 *  de ERP, que também está afetando as integrações existentes.
 * Revisando, padronizando e ajustando.
**/
create schema integr_analitico_crm;

drop table if exists integr_analitico_crm.dim_junk_empresa restrict;
create table if not exists integr_analitico_crm.dim_junk_empresa
(
    codigo serial not null,
    sk_empresa_pdl integer,
    sk_empresa_analitico integer,
    cod_chave_crm integer,
    cod_chave_erp_sap varchar(20),

    constraint dim_junk_empresa_pkey primary key (codigo)
)with(oids=false);

drop table if exists integr_analitico_crm.dim_junk_cliente restrict;
create table if not exists integr_analitico_crm.dim_junk_cliente
(
    codigo serial not null,
    sk_cliente_pdl integer,
    sk_cliente_analitico integer,
    cod_chave_crm varchar(20),
    cod_chave_erp_sap varchar(20),

    constraint dim_junk_cliente_pkey primary key (codigo)
)with(oids=false);

drop table if exists integr_analitico_crm.dim_junk_produto restrict;
create table if not exists integr_analitico_crm.dim_junk_produto
(
    codigo serial not null,
    sk_produto_pdl integer,
    sk_produto_analitico integer,
    cod_chave_crm varchar(20),
    cod_chave_erp_sap varchar(20),

    constraint dim_junk_produto_pkey primary key (codigo)
)with(oids=false);

drop table if exists integr_analitico_crm.dim_junk_vendedor restrict;
create table if not exists integr_analitico_crm.dim_junk_vendedor
(
    codigo serial not null,
    sk_vendedor_pdl integer,
    sk_vendedor_analitico integer,
    cod_chave_crm varchar(20),
    cod_chave_erp_sap varchar(20),

    constraint dim_junk_vendedor_pkey primary key (codigo)
)with(oids=false);

drop table if exists integr_analitico_crm.dim_junk_consultor restrict;
create table if not exists integr_analitico_crm.dim_junk_consultor
(
    codigo serial not null,
    sk_vendedor_pdl integer,
    sk_consultor_analitico integer,
    cod_chave_crm varchar(20),
    cod_chave_erp_sap varchar(20),

    constraint dim_junk_consultor_pkey primary key (codigo)
)with(oids=false);

drop table if exists stg_perf_ctc_crm_consultor_mes restrict;
create table if not exists stg_perf_ctc_crm_consultor_mes
(
    sk_consultor integer,
    ano smallint,
    mes smallint,
    qtd_total_atendimento integer,
    qtd_total_ativ_realizadas integer,
    vlr_meta double precision
)with(oids=false);

/***
 * DDL de ajuste para carga de relacionamento entre cliente e consultor
 *  Cobertura Consultor
**/

drop table if exists stg_rel_cliente_consultor_filial restrict;
create table if not exists stg_rel_cliente_consultor_filial
(
    sk_empresa_analitico integer,
    sk_consultor_analitico integer,
    sk_cliente_analitico integer
)with(oids=false);

/** DDL de ajuste para carga da fato carteira cliente com local apontado **/

drop table if exists stg_carteira_cliente_local_apontado restrict;
create table if not exists stg_carteira_cliente_local_apontado
(
    sk_empresa_analitico integer,
    sk_consultor_analitico integer,
    sk_cliente_analitico integer,
    nk_tempo_mes varchar(10),
    sk_cliente_local_apontado_analitico integer,
    dd_local_com_ponto smallint
)with(oids=false);

/** DDL de ajuste para a carga da fato de cadastro filial mes **/

drop table if exists stg_movimento_cadastro_cooperados restrict;
create table if not exists stg_movimento_cadastro_cooperados
(
    cod_filial varchar(10),
    ano smallint,
    mes smallint,
    qtd_renovados integer,
    qtd_vencidos integer,
    qtd_cooperados integer,
    qtd_inaptos integer,
    qtd_ativos integer,
    qtd_cooperados_admitidos integer,
    qtd_cooperados_demitidos integer,
    qtd_cadastros_a_vencer integer
)with(oids=false);

/** DDL de ajuste para a carga da fato de potencial por cooperado (market) **/

drop table if exists
    stg_market_propriedade_sinco,
    stg_market_propriedade_sap,
    stg_market_propriedade restrict;

create table if not exists stg_market_propriedade_sinco
(
    nk_cliente varchar(10),
    cod_propriedade varchar(10),
    nk_cultura varchar(10),
    vlr_area_plantio numeric(18,2),
    vlr_total_potencial numeric(18,2),
    dd_flag_status smallint
)with(oids=false);

create table if not exists stg_market_propriedade_sap
(
    nk_cliente varchar(10),
    cod_propriedade varchar(10),
    nk_cultura varchar(10),
    vlr_area_plantio numeric(18,2),
    vlr_total_potencial numeric(18,2),
    dd_flag_status smallint
)with(oids=false);

create table if not exists stg_market_propriedade
(
    nk_cliente varchar(10),
    cod_propriedade varchar(10),
    nk_cultura varchar(10),
    vlr_area_plantio numeric(18,2),
    vlr_total_potencial numeric(18,2),
    dd_flag_status smallint
)with(oids=false);

/** Ajuste para a fato de cooperados filial mes **/

alter table if exists stg_movimento_cadastro_cooperados
	drop column if exists dd_flag_estagiario;
alter table if exists stg_movimento_cadastro_cooperados
	add column dd_flag_estagiario smallint;

drop table if exists fato_cooperados_filial_mes restrict;
create table if not exists fato_cooperados_filial_mes
(
    sk_empresa integer not null,
    sk_tempo_mes integer not null,
    qtde_cooperados double precision not null default 0,

    constraint fato_cooperados_filial_mes_pkey primary key (sk_empresa, sk_tempo_mes)
)with(oids=false);

/** Ajuste para a fato de pedidos CRM **/

drop table if exists integr_analitico_crm.dim_junk_cultura restrict;
create table if not exists integr_analitico_crm.dim_junk_cultura
(
    codigo serial not null,
    sk_cultura_pdl integer,
    sk_cultura_analitico integer,
    cod_chave_crm varchar(10),
    cod_chave_erp_sap varchar(10),

    constraint dim_junk_cultura_pkey primary key (codigo)
)with(oids=false);

drop table if exists stg_pedidos;
create table if not exists stg_pedidos
(
    cod_chave_crm_empresa integer,
    cod_chave_crm_vendedor varchar(20),
    nk_tempo_dia date,
    cod_chave_crm_cliente varchar(20),
    cod_chave_crm_produto varchar(20),
    cod_chave_crm_cultura varchar(20),

    dd_cod_pedido bigint,
    dd_num_prazo integer,

    vlr_liq_unitario double precision,
    vlr_itens double precision,
    vlr_total double precision,
    quantidade double precision
)with(oids=false);

/** Ajuste para a fato de relacionamento clientes atendidos **/
drop table if exists stg_rel_clientes_atendidos restrict;
create table if not exists stg_rel_clientes_atendidos
(
	sk_empresa_analitico integer,
	nk_tempo_mes varchar(10),
	sk_consultor_analitico integer,
	sk_cliente_analitico integer
)with(oids=false);

/** Ajuste para a fato de relacionamento clientes atendidos filial **/
drop table if exists stg_rel_clientes_atendidos_filial restrict;
create table if not exists stg_rel_clientes_atendidos_filial
(
	sk_empresa_analitico integer,
	nk_tempo_mes varchar(10),
	sk_consultor_analitico integer,
	sk_cliente_analitico integer
)with(oids=false);

/** Ajuste para a fato de qtd clientes atendidos consultor **/
drop table if exists stg_qtd_atend_cooperados_consultor restrict;
drop table if exists stg_qtd_atend_cooperados_vendedor restrict;
create table if not exists stg_qtd_atend_cooperados_vendedor
(
	sk_consultor_analitico integer,
	sk_cliente_analitico integer,
	nk_tempo_mes varchar(10),
	nome_vendedor varchar(255),
	departamento_vendedor varchar(50),
	qtd_atendimentos integer
)with(oids=false);

/** Ajuste para a fato tipo qtd atendimentos **/
drop table if exists stg_tipo_qtd_atendimento restrict;
create table if not exists stg_tipo_qtd_atendimento
(
	sk_cliente_analitico integer,
	nk_tempo_mes varchar(10),
	nk_tipo_atendimento varchar(255),
	qtd_atendimento integer
)with(oids=false);

/** Ajuste para a fato qtd rtr cooperado mes **/
drop table if exists stg_servico_cooperado_mes restrict;
create table if not exists stg_servico_cooperado_mes
(
	cod_chave_crm_cliente varchar(10),
	nk_tempo_mes varchar(10),
	dd_id_servico bigint
)with(oids=false);

/** Ajuste para a fato performance filial mes **/
drop table if exists stg_qtd_carteira_filial restrict;
create table if not exists stg_qtd_carteira_filial
(
    sk_empresa_analitico integer,
    qtd_carteira integer
)with(oids=false);

/** Ajuste para a fato vendedor relac. vendas mes **/
drop table if exists stg_cliente_vendedor_mes restrict;
create table if not exists stg_cliente_vendedor_mes
(
    sk_consultor_analitico integer,
	sk_cliente_analitico integer,
	nk_tempo_mes varchar(10)
)with(oids=false);

/** Ajuste para a fato relac. clientes atend. com vendas **/
drop table if exists stg_clientes_vendas_mes restrict;
create table if not exists stg_clientes_vendas_mes
(
	sk_empresa_analitico integer,
    sk_vendedor_analitico integer,
	sk_cliente_analitico integer,
	nk_tempo_mes varchar(10)
)with(oids=false);

/** Ajuste para a fato segmento vendas mes **/
drop table if exists stg_vendas_segmento_mes restrict;
create table if not exists stg_vendas_segmento_mes
(
    sk_empresa_analitico integer,
    sk_vendedor_analitico integer,
    nk_tempo_mes varchar(10),
    dd_cod_segmento integer
)with(oids=false);

/** Ajuste para a fato potencial cliente mes **/
drop table if exists stg_potencial_cliente_empresa_mes restrict;
create table if not exists stg_potencial_cliente_empresa_mes
(
    sk_empresa_analitico integer,
    sk_cliente_analitico integer,
    nk_tempo_mes varchar(10),
    vlr_potencial numeric(16,4),
    vlr_venda numeric(17,5)
)with(oids=false);

/** Ajuste para a fato potencial cultura cliente mes **/
drop table if exists stg_pot_cult_cliente_mes restrict;
create table if not exists stg_pot_cult_cliente_mes
(
    cod_chave_crm_cliente varchar(20),
	cod_chave_crm_cultura varchar(20),
    nk_tempo_mes varchar(10),
    area numeric(12,2),
    vlr_potencial_compra numeric(17,5)
)with(oids=false);

/** Ajuste para a fato maquinario cooperado mes **/
alter table if exists stg_maquinario_cooperado
	drop column if exists cod_chave_crm_cliente,
    drop column if exists cod_cliente,
    add column if not exists sk_cliente_analitico integer,
    drop column if exists nk_tempo_dia,
    add column if not exists nk_tempo_mes varchar(10);

/** Ajuste para a fato propriedade cooperado **/
alter table if exists stg_propriedade_cooperado
    drop column if exists cod_cliente,
    add column if not exists sk_cliente_analitico integer;
alter table if exists stg_propriedade_cooperado
    rename column tipo_vinculo to dd_tipo_vinculo;

/** Ajuste para a fato tipo atividade cooperado mes **/
alter table if exists stg_tipo_atividade_cooperado
    drop column if exists cod_vendedor,
    drop column if exists cod_cliente,
    drop column if exists data_atividade,
    add column if not exists sk_consultor_analitico integer,
    add column if not exists sk_cliente_analitico integer,
    add column if not exists nk_tempo_mes varchar(10);

/** Ajuste par a fato relacionamento clientes agenda **/
drop table if exists
    stg_relacionamento_clientes_agenda,
    stg_agenda_carteira_consultor_cliente restrict;
create table if not exists stg_agenda_carteira_consultor_cliente
(
    sk_empresa_analitico integer,
    sk_consultor_analitico integer,
    sk_cliente_analitico integer,
    nk_tempo_mes varchar(10),
    id_agenda_planejada integer,
    id_agenda_realizada integer
)with(oids=false);

/** Ajuste para a fato relacionamento clientes vendas filial **/
drop table if exists stg_cli_vend_filial_mes restrict;
create table if not exists stg_cli_vend_filial_mes
(
    sk_empresa_analitico integer,
    sk_vendedor_analitico integer,
    sk_cliente_analitico integer,
    nk_tempo_mes varchar(10)
)with(oids=false);


/***
 * DDL de apoio para carga de producao cliente cultura
 *	Integracao SINCO/SAP
**/
drop table if exists
	stg_producao_cliente_cultura_sinco,
	stg_producao_cliente_cultura_sap,
	stg_producao_cliente_cultura restrict;
create table if not exists stg_producao_cliente_cultura_sinco
(
	nk_cliente varchar(20),
	nk_tempo_dia date,
	nk_cultura varchar(10),

	qtd_producao numeric(10,2),
	vlr_area numeric(12,2)
)with(oids=false);

create table if not exists stg_producao_cliente_cultura_sap
(
	nk_cliente varchar(20),
	nk_tempo_dia date,
	nk_cultura varchar(10),

	qtd_producao numeric(10,2),
	vlr_area numeric(12,2)
)with(oids=false);

create table if not exists stg_producao_cliente_cultura
(
	nk_cliente varchar(20),
	nk_cultura varchar(10),

	qtd_producao numeric(10,2),
	vlr_area numeric(12,2)
)with(oids=false);

/***
 * DDL de apoio para carga da fato de compras graos
 *	Integracao SINCO/SAP
**/
drop table if exists stg_compras_graos restrict;
create table if not exists stg_compras_graos
(
    nk_empresa varchar(20),
    nk_fornecedor_graos varchar(20),
    nk_segmento varchar(30),
    nk_produto varchar(25),
    nk_tempo_dia_mvto date,

    qtd_kg numeric(12,4),
    qtd_sacas numeric(10,2),
    vlr_nota numeric(16,4),
    vlr_total numeric(16,4)
)with(oids=false);

/** DDL ade ajuste para a fato de renda comissao ctc **/
alter table if exists stg_renda_comissao_ctc
    drop column if exists ctc,
    add column if not exists nk_vendedor varchar(20);

/***
 * DDL de apoio para resolucao da aux vigencia vendedor
 *	Integracao SINCO/SAP
**/
drop table if exists stg_vigencia_vendedor_filial restrict;
drop table if exists dim_vigencia_vendedor_filial restrict;
create table if not exists stg_vigencia_vendedor_filial
(
	cod_chave_crm_empresa integer,
	cod_chave_crm_vendedor varchar(20),
	nk_tempo_dia_inicio_vigencia date,
	nk_tempo_dia_fim_vigencia date
)with(oids=false);
create table if not exists dim_vigencia_vendedor_filial
(
    sk_vigencia_vendedor_filial serial not null,
    sk_vendedor integer not null,
    sk_empresa integer not null,
    nk_tempo_dia_inicio_vigencia date,
    nk_tempo_dia_fim_vigencia date,

    constraint dim_vigencia_vendedor_filial_pkey primary key (sk_vigencia_vendedor_filial)
)with(oids=false);

/***
 *	Caso necessario pode ser utilizado temporariamente essa SQL
 **
insert into dim_vigencia_vendedor_filial
    (sk_empresa, sk_vendedor, nk_tempo_dia_inicio_vigencia,
    nk_tempo_dia_fim_vigencia)
select
    de.sk_empresa,
    dv.sk_vendedor,
    aux.DATAINICIOVIGENCIA as nk_tempo_dia_inicio_vigencia,
    aux.DATAFIMVIGENCIA as nk_tempo_dia_fim_vigencia
from
    aux_vigencia_vendedor aux
    inner join dim_vendedor dv on cast(dv.nk_vendedor as varchar) = aux.cod_vendedor
    inner join dim_empresa de on de.cod_filial = aux.cod_filial
**/

/** DDL de ajuste para atualizacao da dim vendedor **/
alter table if exists stg_vendedor_crm
    drop column if exists cod_vendedor,
    add column if not exists cod_chave_erp_sap varchar(25),
    add column if not exists cod_chave_erp_sinco varchar(25);

/** DDL de novo ajuste para o mapeamento de dados entre crm, erp e BI **/
drop table if exists stg_map_crm_empresa restrict;
create table if not exists stg_map_crm_empresa
(
    cod_chave_crm_empresa varchar(10),
    cod_chave_erp_sap varchar(25),
    cod_chave_erp_sinco varchar(25),
    sk_empresa_analitico integer
)with(oids=false);

/** DDL de novo ajuste para o mapeamento de dados de cliente entre crm, erp e BI **/
drop table if exists stg_map_crm_cliente restrict;
create table if not exists stg_map_crm_cliente
(
    cod_chave_crm_cliente varchar(20),
    cod_chave_erp_sap varchar(25),
    cod_chave_erp_sinco varchar(25),
    sk_cliente_analitico integer
)with(oids=false);

/** DDL de novo ajuste para o mapeamento de dados de produto entre crm, erp e BI **/
drop table if exists stg_map_crm_produto restrict;
create table if not exists stg_map_crm_produto
(
    cod_chave_crm_produto varchar(20),
    cod_chave_erp_sap varchar(75),
    cod_chave_erp_sinco varchar(25),
    sk_produto_analitico integer
)with(oids=false);

/** DDL de novo ajuste para o mapeamento de dados de vendedor entre crm, erp e bi **/
drop table if exists stg_map_crm_vendedor restrict;
create table if not exists stg_map_crm_vendedor
(
    sk_vendedor_analitico integer,
    cod_chave_crm_vendedor varchar(20),
    cod_chave_erp_sap varchar(30),
    cod_chave_erp_sinco varchar(20)
)with(oids=false);

/** DDL de novo ajuste para o mapeamento de dados de consultor entre crm, erp e bi **/
drop table if exists stg_map_crm_consultor restrict;
create table if not exists stg_map_crm_consultor
(
    sk_consultor_analitico integer,
    cod_chave_crm_consultor varchar(20),
    cod_chave_erp_sap varchar(30),
    cod_chave_erp_sinco varchar(20)
)with(oids=false);

/** DDL de novo ajuste para o mapeamento de dados de cultura entre crm, erp e bi **/
drop table if exists stg_map_crm_cultura restrict;
create table if not exists stg_map_crm_cultura
(
    sk_cultura_analitico integer,
    cod_chave_crm_cultura varchar(20),
    cod_chave_erp_sap varchar(30),
    cod_chave_erp_sinco varchar(20)
)with(oids=false);

/** DDL de ajuste da stage de empresa do SAP **/
alter table if exists stg_empresa_sap
	drop column if exists cod_area_negocio,
	add column if not exists cod_area_negocio smallint,
	add column if not exists area_negocio varchar(10);

/** DDL para criacao de factless para guardar log
 *	 gerado em transacao pl/pgsql
 **/
drop table if exists fato_erro restrict;
drop table if exists homologacao.fato_erro restrict;
drop table if exists homologacao.fato_log restrict;
create table if not exists homologacao.fato_log
(
    sk_log serial not null,
    nk_tempo_dia timestamp not null,
    dados text,

    constraint fato_log_pkey primary key (sk_log)
)with(oids=false);

alter table if exists stg_produto
	drop column if exists dd_flag_ativo,
	add column if not exists dd_flag_ativo smallint;

alter table if exists stg_produto_sap
	drop column if exists dd_flag_ativo,
	add column if not exists dd_flag_ativo smallint;

alter table if exists dim_produto
	drop column if exists dd_flag_ativo,
	add column if not exists dd_flag_ativo smallint not null default 0;

/** DDL para novo ajuste para vigencia de vendedor,
 *	 gerando uma factless de mapeamento
 **/
drop table if exists fato_vigencia_vendedor_filial restrict;
create table if not exists fato_vigencia_vendedor_filial
(
	sk_empresa integer not null,
	sk_vendedor integer not null,
	nk_tempo_dia_inicio_vigencia date,
	nk_tempo_dia_fim_vigencia date,

	constraint fato_vigencia_vendedor_filial_empresa_fkey foreign key (sk_empresa) references dim_empresa(sk_empresa),
	constraint fato_vigencia_vendedor_filial_vendedor_fkey foreign key (sk_vendedor) references dim_vendedor(sk_vendedor)
)with (oids=false);

drop index if exists fato_vigencia_vendedor_filial_vend_idx;
create index fato_vigencia_vendedor_filial_vend_idx
	on fato_vigencia_vendedor_filial
	using btree(sk_vendedor, sk_empresa);

/**
 * Devido a problemas de sincronizacao/falta de sincronizacao
 *	entre os ambientes, estou criando um processo permanente
 *	e mais robusto de validacao, pelo menos para vendedor
 **/
drop table if exists stg_sync_vendedor_sinco restrict;
drop table if exists stg_sync_vendedor_sap restrict;
drop table if exists stg_sync_vendedor_crm restrict;

create table if not exists stg_sync_vendedor_sinco
(
    cod_chave_erp_sinco varchar(50),
    dd_cod_funcao varchar(5),
    dd_flag_ativo smallint,
    vendedor varchar(255)
)with(oids=false);

create table if not exists stg_sync_vendedor_sap
(
    cod_chave_erp_sap varchar(50),
    cod_chave_erp_sinco varchar(50),
    vendedor varchar(255)
)with(oids=false);

create table if not exists stg_sync_vendedor_crm
(
    cod_chave_crm varchar(10),
    cod_chave_erp_sap varchar(50),
    cod_chave_erp_sinco varchar(50),
    prefix_cod_chave_erp_sinco varchar(1),
    vendedor varchar(255)
)with(oids=false);

/** Devido a problema de performance na carga/sincronização
 *	 da dimensão de cliente, foi necessario alterar o processo
 *	 realizando de forma separada.
 **/
drop table if exists stg_controle_cliente_decisao_sap restrict;
drop table if exists stg_controle_cliente_op_result_sap restrict;

create table if not exists stg_controle_cliente_decisao_sap
(
    sk_cliente integer,
    cod_chave_erp_sap varchar(25),
    cod_chave_erp_sinco varchar(25),
    dd_situacao varchar(20)
)with(oids=false);

create table if not exists stg_controle_cliente_op_result_sap
(
    sk_cliente_error integer
)with(oids=false);

/**
 *	Ajuste da fato de entrega futura, para que o campo com o valor da
 *		nota fiscal, seja do tipo varchar
 */
alter table if exists fato_saldo_entrega_futura_produto
	alter column notafiscal set data type varchar(25);
alter table if exists fato_saldo_entrega_futura_periodo
	alter column notafiscal set data type varchar(25);

drop schema if exists integrador restrict;

/** Ajuste para a fato potencial cliente cult safra **/
drop table if exists stg_pot_cli_cult_safra restrict;
create table if not exists stg_pot_cli_cult_safra
(
    cod_chave_crm_cliente varchar(20),
	cod_chave_crm_cultura varchar(20),
    nk_tempo_safra varchar(20),
    area numeric(12,2),
    vlr_potencial_compra numeric(18,4)
)with(oids=false);

/**
 *	Ajuste para melhoria de performance de consultas
 *		que utilizam os campos de sk e perfil prod
 *		da dim cliente
 **/
drop index if exists dim_cliente_perfprod_idx;
create index if not exists dim_cliente_perfprod_idx
    on dim_cliente
    using btree(sk_cliente, conta_estrategica);

vacuum full dim_cliente;
vacuum analyze dim_cliente;
reindex table dim_cliente;

drop index if exists dim_tempo_mes_idx1;
drop index if exists idx_dim_tempo_mes_lookup;
drop index if exists dim_tempo_mes_idx;
drop index if exists dim_tempo_mes_idx2;
drop index if exists dim_tempo_mes_nk_idx;
drop index if exists dim_tempo_mes_prim_ult_dia_idx;

create index if not exists dim_tempo_mes_nk_idx
    on dim_tempo_mes
    using btree(nk_tempo_mes asc);

create index if not exists dim_tempo_mes_prim_ult_dia_idx
    on dim_tempo_mes
    using btree(data_primeiro_dia_mes asc, data_ultimo_dia_mes asc);

vacuum full dim_tempo_mes;
vacuum analyze dim_tempo_mes;
reindex table dim_tempo_mes;

/**
 *	Alteracoes para acomodar novos dados relacionados
 *		a faturamento
 */

alter table if exists pre_stg_mov_fat_sinco
    drop column if exists dd_item,
    drop column if exists dd_pedido,
    drop column if exists dd_serie_pedido,
    drop column if exists dd_titulo,
    drop column if exists dd_cond_pagto,
    drop column if exists dd_liberacao,
    drop column if exists dd_conslt_cred,
    drop column if exists dd_num_propr,
    drop column if exists dd_propriedade,
    drop column if exists dd_nota_fiscal_orig,
    drop column if exists dd_tela,
    drop column if exists dd_nf_op,
    drop column if exists dd_nf_cfop,
    drop column if exists dd_nf_desnop,
    drop column if exists dd_fator_conv,
	drop column if exists vlr_fator_conv,
    drop column if exists vlr_markup,
    add column dd_item smallint,
    add column dd_pedido integer,
    add column dd_serie_pedido varchar(1),
    add column dd_titulo integer,
    add column dd_cond_pagto smallint,
    add column dd_liberacao integer,
    add column dd_conslt_cred integer,
    add column dd_num_propr integer,
    add column dd_propriedade varchar(255),
    add column dd_nota_fiscal_orig bigint,
    add column dd_tela varchar(255),
    add column dd_nf_op varchar(1),
    add column dd_nf_cfop smallint,
    add column dd_nf_desnop varchar(50),
    add column vlr_fator_conv real,
    add column vlr_markup double precision;
	
alter table if exists pre_stg_mov_fat_sap
    drop column if exists dd_item,
    drop column if exists dd_pedido,
    drop column if exists dd_serie_pedido,
    drop column if exists dd_titulo,
    drop column if exists dd_cond_pagto,
    drop column if exists dd_liberacao,
    drop column if exists dd_conslt_cred,
    drop column if exists dd_num_propr,
    drop column if exists dd_propriedade,
    drop column if exists dd_nota_fiscal_orig,
    drop column if exists dd_tela,
    drop column if exists dd_nf_op,
    drop column if exists dd_nf_cfop,
    drop column if exists dd_nf_desnop,
    drop column if exists dd_fator_conv,
	drop column if exists vlr_fator_conv,
    drop column if exists vlr_markup,
    add column dd_item smallint,
    add column dd_pedido integer,
    add column dd_serie_pedido varchar(1),
    add column dd_titulo integer,
    add column dd_cond_pagto smallint,
    add column dd_liberacao integer,
    add column dd_conslt_cred integer,
    add column dd_num_propr integer,
    add column dd_propriedade varchar(255),
    add column dd_nota_fiscal_orig bigint,
    add column dd_tela varchar(255),
    add column dd_nf_op varchar(1),
    add column dd_nf_cfop smallint,
    add column dd_nf_desnop varchar(50),
    add column vlr_fator_conv real,
    add column vlr_markup double precision;
	
alter table if exists stg_mov_fat_dia
    drop column if exists dd_item,
    drop column if exists dd_pedido,
    drop column if exists dd_serie_pedido,
    drop column if exists dd_titulo,
    drop column if exists dd_cond_pagto,
    drop column if exists dd_liberacao,
    drop column if exists dd_conslt_cred,
    drop column if exists dd_num_propr,
    drop column if exists dd_propriedade,
    drop column if exists dd_nota_fiscal_orig,
    drop column if exists dd_tela,
    drop column if exists dd_nf_op,
    drop column if exists dd_nf_cfop,
    drop column if exists dd_nf_desnop,
    drop column if exists dd_fator_conv,
	drop column if exists vlr_fator_conv,
    drop column if exists vlr_markup,
	drop column if exists vlr_nota,
    add column dd_item smallint,
    add column dd_pedido integer,
    add column dd_serie_pedido varchar(1),
    add column dd_titulo integer,
    add column dd_cond_pagto smallint,
    add column dd_liberacao integer,
    add column dd_conslt_cred integer,
    add column dd_num_propr integer,
    add column dd_propriedade varchar(255),
    add column dd_nota_fiscal_orig bigint,
    add column dd_tela varchar(255),
    add column dd_nf_op varchar(1),
    add column dd_nf_cfop smallint,
    add column dd_nf_desnop varchar(50),
    add column vlr_fator_conv double precision,
    add column vlr_markup double precision,
	add column vlr_nota double precision;
	
/**#################################################
 *	Script Utilizado para alterar a estrutura das
 *		tabelas auxiliares e particionadas da fato
 *		auxiliar de faturamento dia
 ################################################**/
-- Inicialmente estava planejado para ser utilizada essa fato
--	auxiliar, mas o resultados iniciais foram uma péssima
--	performance, o que levou a concepção de uma nova fato
--	utilizando declarative partitioning (novo processo de
--	particionamento do postgres), obtendo resultado equivalente
--	ao da fato principal, ou seja muito melhor.
/**
DO $AnonymousBlock$
DECLARE
	vSQL TEXT;
	vIterRow record;
BEGIN
	Raise Notice 'Verifica se as fatos necessarias existem, caso não existam, são criadas';
	FOR vIterRow IN
        select distinct t.relname as table
        from pg_catalog.pg_class t
        where
            t.relkind = 'r'
            and lower(t.relname) like lower('fato_movimento_faturamento_dia_aux_%')
        order by t.relname desc
	LOOP
		BEGIN
			Raise Notice 'Geting Locks';

			execute 'LOCK DIM_TEMPO_DIA IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_EMPRESA IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_PRODUTO IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_CLIENTE IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_MUNICIPIO_FATURAMENTO IN EXCLUSIVE MODE;';

			Raise Notice 'Working on table %', vIterRow.table;
			vSQL := format(
					'alter table if exists %s
                        drop column if exists dd_item,
                        drop column if exists dd_pedido,
                        drop column if exists dd_serie_pedido,
                        drop column if exists dd_titulo,
                        drop column if exists dd_cond_pagto,
                        drop column if exists dd_liberacao,
                        drop column if exists dd_conslt_cred,
                        drop column if exists dd_num_propr,
                        drop column if exists dd_propriedade,
                        drop column if exists dd_nota_fiscal_orig,
                        drop column if exists dd_tela,
                        drop column if exists dd_nf_op,
                        drop column if exists dd_nf_cfop,
                        drop column if exists dd_nf_desnop,
                        drop column if exists dd_fator_conv,
						drop column if exists vlr_fator_conv,
                        drop column if exists vlr_markup,
						drop column if exists vlr_nota,
                        add column dd_item smallint,
                        add column dd_pedido integer,
                        add column dd_serie_pedido varchar(1),
                        add column dd_titulo integer,
                        add column dd_cond_pagto smallint,
                        add column dd_liberacao integer,
                        add column dd_conslt_cred integer,
                        add column dd_num_propr integer,
                        add column dd_propriedade varchar(255),
                        add column dd_nota_fiscal_orig bigint,
                        add column dd_tela varchar(255),
                        add column dd_nf_op varchar(1),
                        add column dd_nf_cfop smallint,
                        add column dd_nf_desnop varchar(50),
                        add column vlr_fator_conv double precision,
                        add column vlr_markup double precision
						add column vlr_nota double precision;',
					vIterRow.table);
			execute vSQL;
		
            EXCEPTION WHEN OTHERS THEN
		END;
	END LOOP;
    Raise Notice 'Finishing with table %', 'fato_movimento_faturamento_dia_aux';
    vSQL := format(
            'alter table if exists %s
                drop column if exists dd_item,
                drop column if exists dd_pedido,
                drop column if exists dd_serie_pedido,
                drop column if exists dd_titulo,
                drop column if exists dd_cond_pagto,
                drop column if exists dd_liberacao,
                drop column if exists dd_conslt_cred,
                drop column if exists dd_num_propr,
                drop column if exists dd_propriedade,
                drop column if exists dd_nota_fiscal_orig,
                drop column if exists dd_tela,
                drop column if exists dd_nf_op,
                drop column if exists dd_nf_cfop,
                drop column if exists dd_nf_desnop,
                drop column if exists dd_fator_conv,
				drop column if exists vlr_fator_conv,
                drop column if exists vlr_markup,
				drop column if exists vlr_nota,
                add column dd_item smallint,
                add column dd_pedido integer,
                add column dd_serie_pedido varchar(1),
                add column dd_titulo integer,
                add column dd_cond_pagto smallint,
                add column dd_liberacao integer,
                add column dd_conslt_cred integer,
                add column dd_num_propr integer,
                add column dd_propriedade varchar(255),
                add column dd_nota_fiscal_orig bigint,
                add column dd_tela varchar(255),
                add column dd_nf_op varchar(1),
                add column dd_nf_cfop smallint,
                add column dd_nf_desnop varchar(50),
                add column vlr_fator_conv double precision,
                add column vlr_markup double precision
				add column vlr_nota double precision;',
            'fato_movimento_faturamento_dia_aux');
    execute vSQL;
END
$AnonymousBlock$;
**/
--
----

drop index if exists fato_mov_fat_dia_aux_ano_mes_dia_idx, fato_mov_fat_dia_aux_ano_mes_dia_idx;
drop table if exists partitioned.fato_movimento_faturamento_dia_aux_default cascade;
drop table if exists partitioned.fato_movimento_faturamento_dia_aux cascade;

create table if not exists partitioned.fato_movimento_faturamento_dia_aux
(
    sk_empresa integer not null,
    sk_tempo_dia integer not null,
    sk_cliente integer not null,
    sk_produto integer not null,
    sk_vendedor integer not null,
    sk_cultura integer not null,
    sk_segmento integer not null,
    sk_fornecedor integer not null,
	sk_municipio_faturamento integer not null,
	sk_tempo_dia_venc integer,
	sk_tempo_dia_emissao integer,
	
    dd_nota_fiscal integer not null,
	dd_item smallint not null,
    dd_serie_nota_fiscal varchar(10) not null,

    dd_ano_mes_dia integer not null,

    dd_shopping_rural smallint,
    dd_servico smallint,

    dd_cond_pagto smallint,
    dd_nf_cfop smallint,
    dd_pedido integer,
    dd_titulo integer,
    dd_liberacao integer,
    dd_conslt_cred integer,
    dd_num_propr integer,
    dd_nota_fiscal_orig bigint,
    dd_serie_pedido varchar(1),
    dd_nf_op varchar(1),
    dd_propriedade varchar(255),
    dd_tela varchar(255),
    dd_nf_desnop varchar(50),

	vlr_fator_conv real not null default 0, -- Este valor nao deve ser somado!
	vlr_comissao real not null default 0,
	vlr_nota double precision not null default 0,
    vlr_faturamento double precision not null default 0,
    vlr_margem_contribuicao double precision not null default 0,
    vlr_frete double precision not null default 0,
    vlr_markup double precision not null default 0,
	qtd_kg_lt real not null default 0,
    qtd_movimento real not null default 0,

	-- No Primary Key - This table/fact, will be the exact copy/replicate of the original data
	--	then, we should take huge care with the indexes, because this table will be huge
/*    constraint fato_movimento_faturamento_dia_aux_pkey primary key (sk_tempo_dia, sk_empresa,
        sk_cliente, sk_produto, sk_vendedor, sk_cultura, sk_segmento, sk_fornecedor,
        dd_nota_fiscal, dd_serie_nota_fiscal, dd_item, dd_ano_mes_dia ), */
    constraint fato_movimento_faturamento_dia_aux_empresa_fkey foreign key (sk_empresa) 
        references dim_empresa (sk_empresa),
    constraint fato_movimento_faturamento_dia_aux_tempo_dia_fkey foreign key (sk_tempo_dia)
        references dim_tempo_dia (sk_tempo_dia),
    constraint fato_movimento_faturamento_dia_aux_cliente_fkey foreign key (sk_cliente)
        references dim_cliente (sk_cliente),
    constraint fato_movimento_faturamento_dia_aux_produto_fkey foreign key (sk_produto)
        references dim_produto (sk_produto),
    constraint fato_movimento_faturamento_dia_aux_vendedor_fkey foreign key (sk_vendedor)
        references dim_vendedor (sk_vendedor),
    constraint fato_movimento_faturamento_dia_aux_cultura_fkey foreign key (sk_cultura)
        references dim_cultura (sk_cultura),
    constraint fato_movimento_faturamento_dia_aux_segmento_fkey foreign key (sk_segmento)
        references dim_segmento (sk_segmento),
    constraint fato_movimento_faturamento_dia_aux_fornecedor_fkey foreign key (sk_fornecedor)
        references dim_fornecedor (sk_fornecedor),
	constraint fato_movimento_faturamento_dia_aux_venc_fkey foreign key (sk_tempo_dia_venc)
		references dim_tempo_dia (sk_tempo_dia),
	constraint fato_movimento_faturamento_dia_aux_emissao_fkey foreign key (sk_tempo_dia_emissao)
		references dim_tempo_dia (sk_tempo_dia),
	constraint fato_movimento_faturamento_dia_aux_munic_fkey foreign key (sk_municipio_faturamento)
		references dim_municipio_faturamento (sk_municipio_faturamento)
)
partition by range (dd_ano_mes_dia)
with(oids=false);

create table if not exists partitioned.fato_movimento_faturamento_dia_aux_default
    partition of partitioned.fato_movimento_faturamento_dia_aux default
    with(oids=false);

create index if not exists fato_mov_fat_dia_aux_ano_mes_dia_idx
    on partitioned.fato_movimento_faturamento_dia_aux
    using brin(dd_ano_mes_dia)
    with (pages_per_range = 16);

/**#################################################
 *	Script Utilizado para criar um novo conjunto de
 *		tabelas particionadas (fatos) para a fato
 *		auxiliar de faturamento dia (que será mais
 *      completa - não precisará da fato dia)
 ################################################**/
DO $AnonymousBlock$
DECLARE
	vSQL TEXT;
	vIterRow record;
BEGIN
	FOR vIterRow IN
        select
            (
                'fato_mov_fatr_dia_aux_' || dtd.ano::varchar ||
                lpad(dtd.mes::varchar, 2, '0')
            ) as fact_part_table_name,
            min(
                cast(
                    to_char(dtd.nk_tempo_dia, upper('yyyymmdd'))
                    as integer
                )
            ) - 1 as dd_ano_mes_dia_inicial,
            -- -1 devido as regras de partition range, que variaram de uma versao de 
            -- postgres para outro, no quesito inclusive/exclusive
            max(
                cast(
                    to_char(dtd.nk_tempo_dia, upper('yyyymmdd'))
                    as integer
                )
            ) + 1 as dd_ano_mes_dia_final
            -- +1 devido as regras de partition range, que variaram de uma versao de 
            -- postgres para outro, no quesito inclusive/exclusive
        from dim_tempo_dia dtd
        where 
            dtd.ano >= 2017
            and dtd.ano < extract(year from current_date)
        group by 1
        order by 1 desc
	LOOP
		BEGIN
			Raise Notice 'Geting Locks';

			execute 'LOCK DIM_TEMPO_DIA IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_EMPRESA IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_PRODUTO IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_CLIENTE IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_MUNICIPIO_FATURAMENTO IN EXCLUSIVE MODE;';

			Raise Notice 'Working on table %', vIterRow.fact_part_table_name;
			vSQL := format(
					'create table if not exists partitioned.%s
                        partition of partitioned.fato_movimento_faturamento_dia_aux
                        for values from (%s) to (%s)
                        with(oids=false);',
					vIterRow.fact_part_table_name, 
                    vIterRow.dd_ano_mes_dia_inicial,
                    vIterRow.dd_ano_mes_dia_final);
			execute vSQL;
		END;
	END LOOP;
END
$AnonymousBlock$;
--
----

/** ########################################################
 * Para testes, podemos utilizar o codigo abaixo, para
 *	populacao inicial da fato particionada
 ** #####################################################**/
/**
*
truncate table partitioned.fato_movimento_faturamento_dia_aux cascade;

insert into partitioned.fato_movimento_faturamento_dia_aux
    (dd_ano_mes_dia, sk_tempo_dia, sk_empresa, sk_cliente, sk_produto,
    sk_segmento, sk_fornecedor, sk_cultura, sk_vendedor, dd_nota_fiscal,
    dd_serie_nota_fiscal, dd_item, vlr_faturamento, vlr_margem_contribuicao,
    qtd_movimento)
select
    dd_ano_mes_dia,
    sk_tempo_dia,
    sk_empresa,
    sk_cliente,
    sk_produto,
    sk_segmento,
    sk_fornecedor,
    sk_cultura,
    sk_vendedor,
    dd_nota_fiscal,
    dd_flg_nota_fiscal as dd_serie_nota_fiscal,
    0 as dd_item,
    vlr_faturamento,
    vlr_margem_contribuicao,
    qtd_movimento
from fato_movimento_faturamento_dia f;
**/

drop table if exists public.fato_movimento_faturamento_dia_aux cascade;
drop table if exists public.fato_movimento_faturamento_ticket_dia cascade;
drop table if exists public.stg_movimento_faturamento_dia_realtime cascade;

/**#################################################
 *	Renomeando a fato, para utiliza-la pra transferir
 *		os dados, ao inves de recarregar tudo.
 ################################################**/
DO $AnonymousBlock$
DECLARE
	vSQL TEXT;
	vIterRow record;
BEGIN
	FOR vIterRow IN
        select t.relname as table_name
        from pg_catalog.pg_class t
        where 
            t.relname like 'fato_movimento_faturamento_cliente_produto_mes_%'
            and t.relkind in  ('r', 'p')
	LOOP
		BEGIN
			vSQL := format(
					'alter table if exists %s
                        rename to old_%1$s;',
					vIterRow.table_name);
			execute vSQL;
            -- Raise Notice 'Query %', vSQL;
		END;
	END LOOP;
    FOR vIterRow IN
        select t.relname as table_name
        from pg_catalog.pg_class t
        where 
            t.relname like 'fato_movimento_faturamento_cliente_produto_mes_%'
            and t.relkind = 'i'
	LOOP
		BEGIN
			vSQL := format(
					'alter index if exists %s
                        rename to old_%1$s;',
					vIterRow.table_name);
			execute vSQL;
            -- Raise Notice 'Query %', vSQL;
		END;
	END LOOP;
    alter table if exists fato_movimento_faturamento_cliente_produto_mes
        rename to old_fato_movimento_faturamento_cliente_produto_mes;
END
$AnonymousBlock$;
--
----

drop index if exists fato_mov_fat_cli_prod_mes_ano_mes_idx;
drop table if exists public.fato_movimento_faturamento_cliente_produto_mes_default cascade;
drop table if exists public.fato_movimento_faturamento_cliente_produto_mes cascade;

create table if not exists public.fato_movimento_faturamento_cliente_produto_mes
(
    sk_empresa integer not null,
    sk_tempo_mes integer not null,
    sk_cliente integer not null,
    sk_produto integer not null,
    sk_vendedor integer not null,
    sk_cultura integer not null,
    sk_segmento integer not null,
    sk_fornecedor integer not null,

    dd_ano_mes integer not null,
    dd_shopping_rural smallint not null,
    dd_servico smallint not null,

    vlr_frete double precision not null default 0,
    vlr_margem_contribuicao double precision not null default 0,
    vlr_faturamento double precision not null default 0,
    qtd_movimento double precision not null default 0,

    constraint fato_movimento_faturamento_cliente_produto_mes_pkey primary key
        (sk_tempo_mes, sk_empresa, sk_cliente, sk_produto, sk_vendedor,
        sk_cultura, sk_segmento, sk_fornecedor, dd_ano_mes, dd_shopping_rural,
        dd_servico),
    constraint fato_movimento_faturamento_cliente_produto_mes_empresa_fkey foreign key (sk_empresa) 
        references dim_empresa (sk_empresa),
    constraint fato_movimento_faturamento_cliente_produto_mes_tempo_mes_fkey foreign key (sk_tempo_mes)
        references dim_tempo_mes (sk_tempo_mes),
    constraint fato_movimento_faturamento_cliente_produto_mes_cliente_fkey foreign key (sk_cliente)
        references dim_cliente (sk_cliente),
    constraint fato_movimento_faturamento_cliente_produto_mes_produto_fkey foreign key (sk_produto)
        references dim_produto (sk_produto),
    constraint fato_movimento_faturamento_cliente_produto_mes_vendedor_fkey foreign key (sk_vendedor)
        references dim_vendedor (sk_vendedor),
    constraint fato_movimento_faturamento_cliente_produto_mes_cultura_fkey foreign key (sk_cultura)
        references dim_cultura (sk_cultura),
    constraint fato_movimento_faturamento_cliente_produto_mes_segmento_fkey foreign key (sk_segmento)
        references dim_segmento (sk_segmento),
    constraint fato_movimento_faturamento_cliente_produto_mes_fornecedor_fkey foreign key (sk_fornecedor)
        references dim_fornecedor (sk_fornecedor)
)
partition by list (dd_ano_mes)
with(oids=false);

create table if not exists public.fato_movimento_faturamento_cliente_produto_mes_default
    partition of public.fato_movimento_faturamento_cliente_produto_mes default
    with(oids=false);

create index if not exists fato_mov_fat_cli_prod_mes_ano_mes_idx
    on public.fato_movimento_faturamento_cliente_produto_mes
    using btree(dd_ano_mes asc);
	
/**#################################################
 *	Script Utilizado para criar um novo conjunto de
 *		tabelas particionadas (fatos) para a fato
 *		cliente produto mes
 ################################################**/
DO $AnonymousBlock$
DECLARE
	vSQL TEXT;
	vIterRow record;
BEGIN
	FOR vIterRow IN
        select distinct
            (
                'fato_movimento_faturamento_cliente_produto_mes_' || dtd.ano::varchar ||
                lpad(dtd.mes::varchar, 2, '0')
            ) as fact_part_table_name,
            cast(
                to_char(dtd.nk_tempo_dia, upper('yyyymm'))
                as integer
            ) as dd_ano_mes
        from dim_tempo_dia dtd
        where 
            dtd.ano >= 2017
            and dtd.nk_tempo_dia <= current_date
	LOOP
		BEGIN
			Raise Notice 'Geting Locks';

			execute 'LOCK DIM_TEMPO_DIA IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_EMPRESA IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_PRODUTO IN EXCLUSIVE MODE;';
			execute 'LOCK DIM_CLIENTE IN EXCLUSIVE MODE;';

			Raise Notice 'Working on table %', vIterRow.fact_part_table_name;
			vSQL := format(
					'create table if not exists %s
                        partition of fato_movimento_faturamento_cliente_produto_mes
                        for values in (%s)
                        with(oids=false);',
					vIterRow.fact_part_table_name, 
                    vIterRow.dd_ano_mes);
			execute vSQL;
		END;
	END LOOP;
END
$AnonymousBlock$;
--
----

/**########################################################
 *  Carga Inicial
 **#####################################################**/
truncate table fato_movimento_faturamento_cliente_produto_mes cascade;
-- Deve ser cascade, pois se não for, dará erro, devido ao particionamento

insert into fato_movimento_faturamento_cliente_produto_mes
    (sk_empresa, sk_tempo_mes, sk_cliente, sk_produto, sk_vendedor,
    sk_cultura, sk_segmento, sk_fornecedor, dd_ano_mes,
    dd_shopping_rural, dd_servico, vlr_frete, vlr_margem_contribuicao,
    vlr_faturamento, qtd_movimento)
    select
        f.sk_empresa,
        dtm.sk_tempo_mes,
        f.sk_cliente,
        f.sk_produto,
        f.sk_vendedor,
        f.sk_cultura,
        f.sk_segmento,
        f.sk_fornecedor,
        cast(
            to_char(
                dtm.data_primeiro_dia_mes,
                upper('yyyymm')
            ) as integer
        ) as dd_ano_mes,
        f.dd_shopping_rural,
        f.dd_servico,
        sum(f.vlr_frete) as vlr_frete,
        sum(f.vlr_margem_contribuicao) as vlr_margem_contribuicao,
        sum(f.vlr_faturamento) as vlr_faturamento,
        sum(f.qtd_movimento) as qtd_movimento
    from
        fato_movimento_faturamento_dia f
        inner join dim_tempo_dia dtd using (sk_tempo_dia)
        inner join dim_tempo_mes dtm on dtm.nk_tempo_mes = dtd.mes_ano
    group by 1,2,3,4,5,6,7,8,9,10,11;

vacuum full fato_movimento_faturamento_cliente_produto_mes;
vacuum analyze fato_movimento_faturamento_cliente_produto_mes;
reindex table fato_movimento_faturamento_cliente_produto_mes;

drop index if exists fato_faturamento_por_periodo_servico_shop_rural_idx;

alter table if exists dim_vendedor
	drop column if exists tipo_funcao,
	add column tipo_funcao varchar(255);

alter table if exists stg_vendedor_sap
	drop column if exists tipo_funcao,
	add column tipo_funcao varchar(255);
	
alter table if exists stg_vendedor_sinco
	drop column if exists tipo_funcao,
	add column tipo_funcao varchar(255);
	
alter table if exists pre_stg_mov_fat_sinco
	drop column if exists vlr_comissao,
	add column vlr_comissao real default 0;

alter table if exists stg_mov_fat_dia
	drop column if exists vlr_comissao,
	add column vlr_comissao real default 0;
	
alter table if exists dim_junk_controle_carga_faturamento
	rename to dim_junk_controle_faturamento_apagar_depois_20200701;
	

/** Criação de fato_tipo_atendimento_vendedor - atender tarefa 48325 Demétrio 28/05/2020**/

CREATE TABLE public.fato_tipo_atendimento_vendedor (
  sk_tempo_mes INTEGER NOT NULL,
  sk_empresa INTEGER NOT NULL,
  sk_vendedor INTEGER NOT NULL,
  sk_tipo_atendimento INTEGER NOT NULL,
  qtde_atendimentos INTEGER,
  CONSTRAINT fato_tipo_atendimento_vendedor_idx PRIMARY KEY(sk_tempo_mes, sk_vendedor, sk_tipo_atendimento, sk_empresa),
  CONSTRAINT fato_tipo_atendimento_vendedor_fk FOREIGN KEY (sk_tempo_mes)
    REFERENCES public.dim_tempo_mes(sk_tempo_mes)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_tipo_atendimento_vendedor_fk1 FOREIGN KEY (sk_vendedor)
    REFERENCES public.dim_vendedor(sk_vendedor)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_tipo_atendimento_vendedor_fk2 FOREIGN KEY (sk_tipo_atendimento)
    REFERENCES public.dim_tipo_atendimento(sk_tipo_atendimento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT fato_tipo_atendimento_vendedor_fk3 FOREIGN KEY (sk_empresa)
    REFERENCES public.dim_empresa(sk_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
) 
WITH (oids = false);

ALTER TABLE public.fato_tipo_atendimento_vendedor
  OWNER TO vistrabi;
  
/** Criada a stg_tipo_atendimento_vendedor para atender  tarefa 48325 Demétrio 29/05/2020**/

CREATE TABLE public.stg_tipo_atendimento_vendedor (
  sk_empresa_analitico INTEGER,
  cod_vendedor VARCHAR(20),
  data_atendimento DATE,
  tipo_atendimento VARCHAR(255),
  qtde_atendimento INTEGER
) 
WITH (oids = false);

ALTER TABLE public.stg_tipo_atendimento_vendedor
  OWNER TO vistrabi;
  

/**
 * A fato de titulos de clientes, foi particionada, mas a utilizacao ao longo do
 *	tempo, demonstrou que o crescimento e o volume de dados dessa fato, não
 *	justifica o particionamento e as complexidades envolvidas para sua manutencao.
 *	Recriando a fato, etl e sql de paineis, como uma fato regular, com a
 *	transferencia dos dados, para a nova fato.
 **/
create table if not exists fato_titulo_cliente_empresa_dia
(
	sk_fato_titulo_cliente_empresa_dia serial not null,
	sk_cliente integer not null,
	sk_tempo_dia_emissao integer not null,
	sk_tempo_dia_vencimento integer null,
	sk_tempo_dia_pagamento integer null,
	sk_tipo_garantia_titulo integer null,
	sk_tipo_cobranca_titulo integer null,
	dd_ano_mes_dia integer not null, -- a data aqui eh a data de emissao, caso nao exista eh a data de vencimento.
	dd_filial integer not null default '-1'::integer,
	dd_empresa smallint not null,
	dd_tipo_titulo smallint not null,
	dd_num_titulo varchar(10) not null,
	dd_serie_titulo varchar(10) null default null,
	dd_situacao smallint not null,
	dd_desc_situacao varchar(100) not null, -- coluna dedicada a descrever a situacao dada pela coluna dd_situacao.
	vlr_titulo numeric(18,2) not null default 0,
	constraint fato_titulo_cliente_empresa_dia_pkey primary key (sk_fato_titulo_cliente_empresa_dia, dd_ano_mes_dia),
	constraint fato_titulo_cliente_empresa_dia_cliente_fkey foreign key (sk_cliente) references dim_cliente(sk_cliente),
	constraint fato_titulo_cliente_empresa_dia_emissao_fkey foreign key (sk_tempo_dia_emissao) references dim_tempo_dia(sk_tempo_dia),
	constraint fato_titulo_cliente_empresa_dia_pagamento_fkey foreign key (sk_tempo_dia_pagamento) references dim_tempo_dia(sk_tempo_dia),
	constraint fato_titulo_cliente_empresa_dia_vencimento_fkey foreign key (sk_tempo_dia_vencimento) references dim_tempo_dia(sk_tempo_dia),
	constraint fato_titulo_cliente_empresa_dia_tipo_garantia_fkey foreign key (sk_tipo_garantia_titulo) references dim_tipo_garantia_titulo (sk_tipo_garantia_titulo),
	constraint fato_titulo_cliente_empresa_dia_tipo_cobranca_fkey foreign key (sk_tipo_cobranca_titulo) references dim_tipo_cobranca_titulo (sk_tipo_cobranca_titulo)
) with (oids=false);

comment on column fato_titulo_cliente_empresa_dia.dd_ano_mes_dia is 'A data aqui eh a data de emissao, caso nao exista eh a data de vencimento.';
comment on column fato_titulo_cliente_empresa_dia.dd_desc_situacao is 'Coluna dedicada a descrever a situacao dada pela coluna dd_situacao.';

truncate table fato_titulo_cliente_empresa_dia;

insert into fato_titulo_cliente_empresa_dia
    (sk_cliente, sk_tempo_dia_emissao, sk_tempo_dia_vencimento,
    sk_tempo_dia_pagamento, sk_tipo_garantia_titulo, sk_tipo_cobranca_titulo,
    dd_ano_mes_dia, dd_filial, dd_empresa, dd_tipo_titulo, dd_num_titulo,
    dd_serie_titulo, dd_situacao, dd_desc_situacao, vlr_titulo)
    select
        sk_cliente,
        sk_tempo_dia_emissao,
        sk_tempo_dia_vencimento,
        sk_tempo_dia_pagamento,
        sk_tipo_garantia_titulo,
        sk_tipo_cobranca_titulo,
        dd_ano_mes_dia,
        dd_filial,
        dd_empresa,
        dd_tipo_titulo,
        dd_num_titulo,
        dd_serie_titulo,
        dd_situacao,
        dd_desc_situacao,
        vlr_titulo
    from partitioned.fato_titulo_cliente_empresa_dia;

drop index if exists fato_titulo_cliente_empresa_dia_ano_mes_dia_idx restrict;
drop index if exists fato_titulo_cliente_empresa_dia_cliente_idx  restrict;
drop index if exists fato_titulo_cliente_empresa_dia_emissao_idx restrict;

create index fato_titulo_cliente_empresa_dia_ano_mes_dia_idx
	on fato_titulo_cliente_empresa_dia
	using btree (dd_ano_mes_dia);
create index fato_titulo_cliente_empresa_dia_cliente_idx
	on fato_titulo_cliente_empresa_dia
	using btree (sk_cliente);
create index fato_titulo_cliente_empresa_dia_emissao_idx
	on fato_titulo_cliente_empresa_dia
	using btree (sk_tempo_dia_emissao);

drop table if exists partitioned.fato_titulo_cliente_empresa_dia cascade;

alter table if exists fato_titulo_cliente_empresa_dia
    add column if not exists cod_filial varchar(5);
alter table if exists fato_titulo_cliente_empresa_dia
    alter column cod_filial set data type varchar(5) using (cast(dd_filial as varchar)),
    alter column cod_filial set not null;

create index fato_titulo_cli_emp_dia_filial_idx
    on fato_titulo_cliente_empresa_dia
    using btree(cod_filial asc);

with
    empresa as
    (
        select
        	djec.data->>'cod_chave_erp_sinco' as dd_filial,
        	de.cod_filial
        from 
        	dim_junk_empresa_controle djec
        	inner join dim_empresa de using (sk_empresa)
        where nullif(djec.data->>'cod_chave_erp_sinco', '') is not null
    )
update fato_titulo_cliente_empresa_dia f
set cod_filial = e.cod_filial
from empresa e
where e.dd_filial = cast(f.dd_filial as varchar);

/**#################################################
 * ## DDL de Objetos para o Mapa de Potencial     ##
 * Author: Flavio Alexsandro Silva
 * Date:   22/10/2020
 * Comment: Ticket 19133 Redmine #63996
 *  Esta analise tem alguma relacao com o painel
 *      APS do CRM Analitico, mas nao sao as mesmas
 *      regras.
 **###############################################**/
-- Schema para armazenar todos os objetos relativos
--  ao plano safra. Algo semelhante a separacao de
--  um Data Lake. Somente a fato principal ficara
--  na public
create schema if not exists plano_safra;

/**
 * Uso durante o desenvolvimento
drop table if exists public.stg_potencial_plano_safra restrict;
drop table if exists public.fato_potencial_plano_safra restrict;
drop table if exists plano_safra.fato_filial_consultor restrict;
drop table if exists plano_safra.fato_consultor_filial restrict;
drop table if exists plano_safra.fato_potencial_ibge restrict;
drop table if exists plano_safra.fato_filial_area_atuacao restrict;
drop table if exists plano_safra.fato_carteira_consultor restrict;
drop table if exists plano_safra.fato_carteira_filial restrict;
drop table if exists plano_safra.formulario_perfil_plano_safra restrict;
drop table if exists plano_safra.dim_cultura_crm restrict;
drop table if exists plano_safra.dim_segmento_crm restrict;
drop table if exists plano_safra.dim_propriedade_crm restrict;
drop table if exists plano_safra.dim_local_crm restrict;
drop table if exists plano_safra.dim_cliente_crm restrict;
**/
-- Dimensao de cultura para o plano safra
create table if not exists plano_safra.dim_cultura_crm
(
    sk_cultura_crm integer not null,
    sk_cultura_pdl integer not null,
    cod_chave_crm varchar(20),
    cod_chave_erp_sap varchar(20),
    dd_hf smallint not null default 0,
    dd_rebanho smallint not null default 0,
    dd_cultura_ibge varchar(100),
    cultura_crm varchar(100) not null,
    cultura_pdl varchar(100),
    
    constraint dim_cultura_crm_pkey primary key (sk_cultura_crm),
    constraint dim_cultura_crm_fkey foreign key (sk_cultura_crm) references integr_analitico_crm.dim_junk_cultura(codigo),
    constraint dim_cultura_crm_pdl_fkey foreign key (sk_cultura_pdl) references public.dim_cultura(sk_cultura)
) with(oids=false);

-- Dimensao de Segmento (especificos - sao diferentes dos produtos) para o Plano Safra
create table if not exists plano_safra.dim_segmento_crm
(
    sk_segmento_crm serial not null,
    cod_chave_crm varchar(20) not null,
    cod_chave_erp_sap varchar(30), -- campo codigo do crm (deveria vir o codigo SAP aqui)
    cod_chave_sincronizacao_crm varchar(50), -- campo chaveerp do crm
    nivel varchar(5), -- Cada nível tem um significado dentro da Coopercitrus
    segmento varchar(255) not null,
    segmento_aps_crm_analitco varchar(255) not null,

    constraint dim_segmento_crm_pkey primary key (sk_segmento_crm)
)with(oids=false);

-- Dimensao de Cliente para o Plano Safra
create table if not exists plano_safra.dim_cliente_crm
(
    sk_cliente_crm integer not null,
    sk_cliente_pdl integer,
    dd_cod_crm integer,
    dd_matricula_crm varchar(10),
    cod_chave_crm varchar(20),
    cod_chave_erp_sap varchar(20),

    constraint dim_cliente_crm_pkey primary key (sk_cliente_crm),
    constraint dim_cliente_crm_fkey foreign key (sk_cliente_crm) references integr_analitico_crm.dim_junk_cliente (codigo),
    constraint dim_cliente_crm_pdl_fkey foreign key (sk_cliente_pdl) references public.dim_cliente (sk_cliente)
)with(oids=false);

-- Dimensao de Local para o Plano Safra
create table if not exists plano_safra.dim_local_crm
(
    sk_local_crm serial not null,
    sk_cliente_crm integer,
    dd_cod_crm integer,
    cod_chave_crm varchar(20) not null,

    constraint dim_local_crm_pkey primary key (sk_local_crm),
    constraint dim_local_crm_cliente_fkey foreign key (sk_cliente_crm) references plano_safra.dim_cliente_crm(sk_cliente_crm)
)with(oids=false);

-- Dimensao de propriedade para o Plano Safra
create table if not exists plano_safra.dim_propriedade_crm
(
    sk_propriedade_crm serial not null,
    dd_cod_crm integer,
    cod_chave_crm varchar(20) not null,
    dd_posse smallint not null default 0,
    dd_arrendamento smallint not null default 0,

    constraint dim_propriedade_crm_pkey primary key (sk_propriedade_crm),
    constraint dim_propriedade_crm_cst check (dd_posse in (0,1) and dd_arrendamento in (0,1))
)with(oids=false);

-- Fato que representa a carteira do consultor
create table if not exists plano_safra.fato_carteira_consultor
(
    sk_vendedor integer not null,
    sk_cliente_crm integer not null,
    sk_local_crm integer,
    sk_propriedade_crm integer,

    constraint fato_carteira_consultor_pkey primary key (sk_vendedor, sk_cliente_crm, sk_local_crm, sk_propriedade_crm),
    constraint fato_carteira_consultor_cst check (sk_local_crm is not null or sk_propriedade_crm is not null),
    constraint fato_carteira_consultor_vendedor_fkey foreign key (sk_vendedor) references public.dim_vendedor (sk_vendedor),
    constraint fato_carteira_consultor_cliente_fkey foreign key (sk_cliente_crm) references plano_safra.dim_cliente_crm (sk_cliente_crm),
    constraint fato_carteira_consultor_local_fkey foreign key (sk_local_crm) references plano_safra.dim_local_crm (sk_local_crm),
    constraint fato_carteira_consultor_propriedade_fkey foreign key (sk_propriedade_crm) references plano_safra.dim_propriedade_crm (sk_propriedade_crm)
)with(oids=false);

-- Fato que armazenara o potencial vindo do IBGE (agricola e rebanho)
create table if not exists plano_safra.fato_potencial_ibge
(
    sk_municipio integer not null,
    dd_cultura_ibge varchar(100) not null,
    dd_rebanho smallint not null default 0,
    potencial double precision default 0,

    constraint fato_potencial_ibge_pkey primary key (sk_municipio, dd_cultura_ibge),
    constraint fato_potencial_ibge_municipio_fkey foreign key (sk_municipio) references public.dim_municipio_faturamento (sk_municipio_faturamento)
)with(oids=false);

-- Formulario de restricao de perfis para os calculos de Plano Safra EXCLUSIVAMENTE
create table if not exists plano_safra.formulario_perfil_plano_safra
(
    codigo serial not null,
    cod_chave_crm varchar(25) not null,
    perfil varchar(255) not null,
    dd_perfil_habilitado_calculo smallint not null default 0, -- 0 para perfil nao habilitado para calculo, 1 para perfil habilitado para calculo

    constraint formulario_perfil_plano_safra_pkey primary key (codigo),
    constraint formulario_perfil_plano_safra_cst check(dd_perfil_habilitado_calculo in (0,1))
)with(oids=false);

-- Fato sem fato que relaciona as filiais com suas Areas de Atuacao (Area e Cidade)
create table if not exists plano_safra.fato_filial_area_atuacao
(
    sk_empresa integer not null,
    sk_municipio integer not null,
    dd_area_atuacao varchar(255) not null,
    dd_area_atuacao_crm varchar(255) not null,

    constraint fato_filial_area_atuacao_pkey primary key (sk_empresa, sk_municipio, dd_area_atuacao),
    constraint fato_filial_area_atuacao_empresa_fkey foreign key (sk_empresa) references public.dim_empresa(sk_empresa),
    constraint fato_filial_area_atuacao_municipio_fkey foreign key (sk_municipio) references public.dim_municipio_faturamento(sk_municipio_faturamento)
)with(oids=false);

-- Fato sem fato que relaciona os consultores com as filiais
create table if not exists plano_safra.fato_consultor_filial
(
    sk_empresa integer not null,
    sk_vendedor integer not null,

    constraint fato_consultor_filial_pkey primary key (sk_empresa, sk_vendedor),
    constraint fato_consultor_filial_empresa_fkey foreign key (sk_empresa) references public.dim_empresa (sk_empresa),
    constraint fato_consultor_filial_vendedor_fkey foreign key (sk_vendedor) references public.dim_vendedor (sk_vendedor)
)with(oids=false);

-- Fato sem fato que cria a carteira da filial, com base na carteira do consultor
create table if not exists plano_safra.fato_carteira_filial
(
    sk_empresa integer not null,
    sk_cliente_crm integer not null,
    sk_propriedade_crm integer not null,

    constraint fato_carteira_filial_pkey primary key (sk_empresa, sk_cliente_crm, sk_propriedade_crm),
    constraint fato_carteira_filial_empresa_fkey foreign key (sk_empresa) references public.dim_empresa (sk_empresa),
    constraint fato_carteira_filial_cliente_fkey foreign key (sk_cliente_crm) references plano_safra.dim_cliente_crm (sk_cliente_crm),
    constraint fato_carteira_filial_propriedade_fkey foreign key (sk_propriedade_crm) references plano_safra.dim_propriedade_crm (sk_propriedade_crm)
)with(oids=false);

-- Fato principal de potencial Plano Safra
create table if not exists public.fato_potencial_plano_safra
(
    sk_segmento_crm integer not null,
    sk_cultura_crm integer not null,
    sk_cliente_crm integer not null,
    sk_propriedade_crm integer not null,
    dd_safra varchar(50) not null,
    dd_ano_safra varchar(20) not null,
    area double precision default 0,
    potencial double precision default 0,

    constraint fato_potencial_plano_safra_segmento_fkey foreign key (sk_segmento_crm) references plano_safra.dim_segmento_crm (sk_segmento_crm),
    constraint fato_potencial_plano_safra_cultura_fkey foreign key (sk_cultura_crm) references plano_safra.dim_cultura_crm (sk_cultura_crm),
    constraint fato_potencial_plano_safra_cliente_fkey foreign key (sk_cliente_crm) references plano_safra.dim_cliente_crm(sk_cliente_crm),
    constraint fato_potencial_plano_safra_propriedade_fkey foreign key (sk_propriedade_crm) references plano_safra.dim_propriedade_crm(sk_propriedade_crm)    
)with(oids=false);

comment on table fato_potencial_plano_safra is 'Fato sem chave primaria, pois irá trazer todos os lançamentos, inclusive, caso exista diferenca entre o pacote de insumo e o potencial do plano de insumo, um lancamento sem segmento, com essa diferenca.';

comment on column fato_potencial_plano_safra.area is 'Este campo é utilizado para armazenar a area das propriedades no caso de culturas agricolas e quantidades no caso de culturas de rebanho.';

create unlogged table if not exists public.stg_potencial_plano_safra
(
    idfilial integer,
    idusuario integer,
    idclassedeproduto integer,
    idcultura integer,
    idparceiro integer,
    idlocal integer,
    idpropriedade integer,
    safra varchar(100),
    area double precision,
    potencial double precision
)with(oids=false);

alter table if exists plano_safra.dim_propriedade_crm
	drop column if exists dd_cod_chave_ibge,
	add column dd_cod_chave_ibge integer;
alter table if exists plano_safra.dim_propriedade_crm
	alter column dd_cod_chave_ibge set default null;

drop table if exists plano_safra.fato_movimento_faturamento_dia_simplified;

create unlogged table plano_safra.fato_movimento_faturamento_dia_simplified
(
    sk_empresa integer not null,
    sk_segmento integer not null,
    sk_cliente integer not null,
    sk_municipio_faturamento integer not null,
    dd_ano_mes_dia integer not null,
    vlr_faturamento double precision default 0 not null,

    constraint fato_mov_fat_dia_simpl_pkey primary key (sk_empresa, sk_segmento, 
        sk_municipio_faturamento, sk_cliente, dd_ano_mes_dia),
    constraint fato_mov_fat_dia_simpl_empresa_fkey foreign key (sk_empresa) references dim_empresa(sk_empresa),

    constraint fato_mov_fat_dia_simpl_segmento_fkey foreign key (sk_segmento) references dim_segmento(sk_segmento),
    constraint fato_mov_fat_dia_simpl_cliente_fkey foreign key (sk_cliente) references dim_cliente(sk_cliente),
    constraint fato_mov_fat_dia_simpl_mun_fatur_fkey foreign key (sk_municipio_faturamento) references dim_municipio_faturamento(sk_municipio_faturamento)
)with(oids=false);

create index fato_mov_fatur_dia_simpl_data_idx
    on plano_safra.fato_movimento_faturamento_dia_simplified
    using btree(dd_ano_mes_dia asc, sk_empresa);

insert into plano_safra.fato_movimento_faturamento_dia_simplified
    select
        f.sk_empresa,
        ds.sk_segmento,
        f.sk_cliente,
        f.sk_municipio_faturamento,
        f.dd_ano_mes_dia,
        sum(f.vlr_faturamento) as vlr_faturamento
    from
        partitioned.fato_movimento_faturamento_dia_aux f
        inner join dim_produto dp using (sk_produto)
        inner join dim_segmento ds on ds.nk_segmento = dp.nk_segmento
    group by 1,2,3,4,5;
	
/**#################################################
 * Author: Flavio Alexsandro Silva
 * Date:   04/01/2021
 * Comment: Ticket 19133 Redmine #63996
 *  Implementando extração dinamica de dados do IBGE
 *      com tratamento do JSon no Postgresql
 **###############################################**/
 -- Para uso durante o desenvolvimento
 /**
     drop table if exists stg_data;
     drop table if exists stg_jsondata;
     drop table if exists plano_safra.stg_potencial_unitario_crm;
     drop table if exists plano_safra.stg_dados_producao_ibge;
     drop table if existss plano_safra.stg_producao_agric_pec_ibge;
 **/
create unlogged table if not exists stg_data
(
    tipo varchar(255) not null,
    data text not null
)with(oids=false);

create unlogged table if not exists stg_jsondata
(
    tipo varchar(255) not null,
    data jsonb not null
)with(oids=false);

create table if not exists plano_safra.stg_potencial_unitario_crm
(
    cod_chave_crm_safra integer not null,
    dd_last_safra smallint not null default 0,
    safra varchar(255) not null,
    nivel_tecnologico varchar(255) not null,
    cultura_ibge varchar(255) not null,
    potencial_unitario double precision default 0,
    produtividade_unitario double precision default 1
)with(oids=false);

/**
 * Dados de Producao Agricola do IBGE (PAM - Pesquisa Agricola Municipal)
 *      Producao Pecuaria do IBGE (PPM - Pesquisa Pecuaria Municipal)
 **/
create table if not exists plano_safra.stg_producao_agric_pec_ibge
(
    codigo_ibge integer not null, -- Chave de Identificacao do IBGE para os Municipios
    ano_ref_ibge smallint not null default 0, -- Referente ao ano de pesquisa
    dd_pecuaria smallint not null default 0, -- Informa se a cultura eh ou nao rebanho/pecuaria
    cultura_ibge varchar(255) not null,
    valor double precision default 0 -- Valor pois pode ser aplicado a cabecas de gado ou area plantada
)with(oids=false);

-- Coluna valor deve receber tanto a área, quanto a quantidade de cabeças de gado, etc
alter table if exists plano_safra.fato_potencial_ibge
    drop column if exists valor restrict,
    add column if not exists valor double precision,
    alter column valor set default 0;
	
/**
 * Alteracoes para inclusao dos dados adicionais do campo MC 05.01, jah realizado para o SINCO
 *  agora sendo implementados para o SAP
 */
alter table if exists dim_produto
	drop column if exists prod_resumido,
	drop column if exists produto_resumido,
	add column if not exists desc_prod_agrupado varchar(255) default null;

alter table if exists stg_produto_sap
	drop column if exists produto_resumido,
	add column if not exists desc_prod_agrupado varchar(255) default null;
	
alter table if exists pre_stg_mov_fat_sinco
	add column if not exists vlr_perc_comissao real default 0;

alter table if exists pre_stg_mov_fat_sap
	add column if not exists vlr_comissao real default 0,
	add column if not exists vlr_perc_comissao real default 0,
	alter column dd_cond_pagto set data type varchar(10) using (cast(dd_cond_pagto as varchar)),
	alter column dd_cond_pagto set default null,
	alter column dd_item set data type varchar(10) using (cast(dd_item as varchar)),
	alter column dd_item set default null;

alter table if exists stg_mov_fat_dia
	add column if not exists vlr_perc_comissao real default 0,
	alter column dd_cond_pagto set data type varchar(10) using (cast(dd_cond_pagto as varchar)),
	alter column dd_cond_pagto set default null,
	alter column dd_item set data type varchar(10) using (cast(dd_item as varchar)),
	alter column dd_item set default null;

alter table if exists partitioned.fato_movimento_faturamento_dia_aux
	add column if not exists vlr_perc_comissao double precision default 0,
	alter column dd_cond_pagto set data type varchar(10) using (cast(dd_cond_pagto as varchar)),
	alter column dd_cond_pagto set default null,
	alter column dd_item set data type varchar(10) using (cast(dd_item as varchar)),
	alter column dd_item set default null;
	
/**#################################################
 * Author: Flavio Alexsandro Silva
 * Date:   08/03/2021
 * Comment: Ticket 22957 Redmine #73412
 *  Acrescentando nova coluna de informação (material basico)
 *      na dimensão de Produto
 **###############################################**/
 
alter table if exists stg_produto_sap
	add column if not exists material_basico varchar;
	
alter table if exists dim_produto
	add column if not exists material_basico varchar(255);
	
/**#################################################
 * Author: Flavio Alexsandro Silva
 * Date:   26/03/2021
 * Comment: 
 *	Ticket 24163 Redmine #75013
 *	Ticket 8930 Redmine #40482
 *  Ticket 18584 Redmine #63051
 *  Reestruturação do processo de carga das fatos
 *	 de faturamento derivadas (que possuem origem
 *	 nas fatos de faturamento dia e faturamento dia aux)
 *	Remoção de fatos não utilizadas e que demandavam
 *	 alto tempo de processamento
 **###############################################**/
drop table if exists fato_faturamento_por_periodo restrict;
drop table if exists fato_faturamento_por_periodo_mes restrict;
drop table if exists fato_movimento_faturamento_cliente_periodo_mes restrict;
drop table if exists fato_movimento_faturamento_mes restrict;
drop table if exists fato_movimento_faturamento_municipio_mes restrict;
drop table if exists fato_movimento_faturamento_cliente_municipio_mes restrict;

create table if not exists fato_movimento_faturamento_cliente_periodo_mes
(
	sk_empresa integer not null,
	sk_tempo_mes integer not null,
	sk_segmento integer not null,
	sk_fornecedor integer not null,
	sk_cultura integer not null,
	sk_cliente integer not null,
	dd_ano_mes integer not null,
	dd_periodo smallint not null,
	dd_shopping_rural smallint not null,
	dd_servico smallint not null,
	vlr_faturamento double precision not null default 0,
	vlr_margem_contribuicao double precision not null default 0,

	constraint fat_mov_fatur_cli_per_mes_pkey primary key (sk_tempo_mes, sk_empresa,
		sk_segmento, sk_fornecedor, sk_cultura, sk_cliente, dd_ano_mes, dd_periodo,
		dd_shopping_rural, dd_servico),
	constraint fat_mov_fatur_cli_per_mes_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa),
	constraint fat_mov_fatur_cli_per_mes_tempo_mes_fkey foreign key (sk_tempo_mes) references dim_tempo_mes (sk_tempo_mes),
	constraint fat_mov_fatur_cli_per_mes_segmento_fkey foreign key (sk_segmento) references dim_segmento (sk_segmento),
	constraint fat_mov_fatur_cli_per_mes_fornecedor_fkey foreign key (sk_fornecedor) references dim_fornecedor (sk_fornecedor),
	constraint fat_mov_fatur_cli_per_mes_cultura_fkey foreign key (sk_cultura) references dim_cultura (sk_cultura),
	constraint fat_mov_fatur_cli_per_mes_cliente_fkey foreign key (sk_cliente) references dim_cliente (sk_cliente)
)with(oids=false);

create index fato_mov_fatur_cli_per_mes_dd_ano_mes_idx
	on fato_movimento_faturamento_cliente_periodo_mes
	using btree(dd_ano_mes asc);
	
create table if not exists fato_movimento_faturamento_cliente_municipio_mes
(
	sk_empresa integer not null,
	sk_tempo_mes integer not null,
	sk_vendedor integer not null,
	sk_segmento integer not null,
	sk_fornecedor integer not null,
	sk_cultura integer not null,
	sk_municipio_faturamento integer not null,
	sk_cliente integer not null,
	dd_ano_mes integer not null,
	dd_servico smallint not null,
	vlr_faturamento double precision not null default 0,
	vlr_margem_contribuicao double precision not null default 0,
	qtd_movimento double precision not null default 0,
	qtd_kg_lt double precision not null default 0,
	
	constraint fato_mov_fatur_cli_mun_mes_pkey primary key (dd_ano_mes, sk_empresa,
		sk_tempo_mes, sk_vendedor, sk_segmento, sk_fornecedor, sk_cultura,
		sk_municipio_faturamento, sk_cliente, dd_servico),
	constraint fato_mov_fatur_cli_mun_mes_empresa_fkey foreign key (sk_empresa) references dim_empresa (sk_empresa),
	constraint fato_mov_fatur_cli_mun_mes_tempo_mes_fkey foreign key (sk_tempo_mes) references dim_tempo_mes (sk_tempo_mes),
	constraint fato_mov_fatur_cli_mun_mes_vendedor_fkey foreign key (sk_vendedor) references dim_vendedor (sk_vendedor),
	constraint fato_mov_fatur_cli_mun_mes_segmento_fkey foreign key (sk_segmento) references dim_segmento (sk_segmento),
	constraint fato_mov_fatur_cli_mun_mes_fornecedor_fkey foreign key (sk_fornecedor) references dim_fornecedor (sk_fornecedor),
	constraint fato_mov_fatur_cli_mun_mes_cultura_fkey foreign key (sk_cultura) references dim_cultura (sk_cultura),
	constraint fato_mov_fatur_cli_mun_mes_municipio_fkey foreign key (sk_municipio_faturamento) 
		references dim_municipio_faturamento (sk_municipio_faturamento),
	constraint fato_mov_fatur_cli_mun_mes_cliente_fkey foreign key (sk_cliente) references dim_cliente (sk_cliente)
)with(oids=false);

create index fato_mov_fatur_cli_mun_mes_ano_mes_idx
	on fato_movimento_faturamento_cliente_municipio_mes
	using btree(sk_tempo_mes);

/**#################################################
 * Author: Flavio Alexsandro Silva
 * Date:   04/04/2021
 * Comment:
 *  Acrescentando coluna de peso liquido do produto
 **###############################################**/

alter table if exists stg_produto_sap
	add column if not exists vlr_peso_liquido real default 0;
	
alter table if exists stg_produto
	add column if not exists vlr_peso_liquido real default 0;
	
alter table if exists dim_produto
	add column if not exists vlr_peso_liquido real default 0;
	
/**#################################################
 * Author: Flavio Alexsandro Silva
 * Date:   13/09/2021
 * Comment:
 *  Criando funcao de acesso aos dados de estoque para o powerbi
 **###############################################**/
create schema sec_schema;

create or replace function sec_schema.func_dados_estoque
    (data_inicial date = to_date('01/01/2019', upper('dd/mm/yyyy')), data_final date = to_date('02/01/2019', upper('dd/mm/yyyy')))
returns table
    (filial varchar, produto varchar, data_saldo date, vlr_estoque double precision, vlr_saida double precision,
        vlr_entrada double precision, vlr_entrega_futura double precision, vlr_pedido_venda double precision,
        vlr_reserva double precision, vlr_estoque_disponivel double precision, vlr_estoque_irregular double precision,
        vlr_transito double precision, vlr_pedido_compra_aberto double precision, qtd_estoque double precision,
        qtd_saida double precision, qtd_entrada double precision, qtd_entrega_futura double precision,
        qtd_pedido_venda double precision, qtd_reserva double precision, qtd_estoque_disponivel double precision,
        qtd_estoque_irregular double precision, qtd_transito double precision, qtd_pedido_compra_aberto double precision)
    LANGUAGE SQL
    STABLE
    PARALLEL SAFE
    AS $Anonymous$
        select
            de.cod_filial as filial,
            dp.cod_produto as produto,
            data_saldo,
            vlr_estoque,
            vlr_saida,
            vlr_entrada,
            vlr_entrega_futura,
            vlr_pedido_venda,
            vlr_reserva,
            vlr_estoque_disponivel,
            vlr_estoque_irregular,
            vlr_transito,
            vlr_pedido_compra_aberto,
            qtd_estoque,
            qtd_saida,
            qtd_entrada,
            qtd_entrega_futura,
            qtd_pedido_venda,
            qtd_reserva,
            qtd_estoque_disponivel,
            qtd_estoque_irregular,
            qtd_transito,
            qtd_pedido_compra_aberto
        from
            (
                select
                    sk_empresa,
                    sk_produto,
                    nk_tempo_dia as data_saldo,
                    vlr_estoque::double precision,
                    vlr_saida::double precision,
                    vlr_entrada::double precision,
                    vlr_entrega_futura::double precision,
                    vlr_pedido_venda::double precision,
                    vlr_reserva::double precision,
                    vlr_estoque_disponivel::double precision,
                    vlr_estoque_irregular::double precision,
                    vlr_transito::double precision,
                    vlr_pedido_compra_aberto::double precision,
                    qtd_estoque::double precision,
                    qtd_saida::double precision,
                    qtd_entrada::double precision,
                    qtd_entrega_futura::double precision,
                    qtd_pedido_venda::double precision,
                    qtd_reserva::double precision,
                    qtd_estoque_disponivel::double precision,
                    qtd_estoque_irregular::double precision,
                    qtd_transito::double precision,
                    qtd_pedido_compra_aberto::double precision
                from fato_movimento_estoque_dia
                where nk_tempo_dia between data_inicial and data_final
            ) f
            inner join dim_empresa de using (sk_empresa)
            inner join dim_produto dp using (sk_produto)
    $Anonymous$;
 
create user powerbi with login NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOREPLICATION NOBYPASSRLS PASSWORD 'powerbi';
revoke all privileges on all tables in schema homologacao, integr_analitico_crm, onclik, partitioned, plano_safra, public from powerbi cascade;
revoke all privileges on all functions in schema homologacao, integr_analitico_crm, onclik, partitioned, plano_safra, public from powerbi cascade;
revoke usage on schema homologacao, integr_analitico_crm, onclik, partitioned, plano_safra, public from powerbi;

grant execute on function sec_schema.func_dados_estoque to powerbi;
grant usage on schema sec_schema to powerbi;
alter function sec_schema.func_dados_estoque(date, date) security definer;